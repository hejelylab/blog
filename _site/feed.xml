<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2024-05-04T18:52:31+03:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Hejely Lab</title><subtitle>DFIR | Threat Hunting</subtitle><author><name>HejelyLab</name></author><entry><title type="html">Incident Response &amp;amp; Threat Hunting Series, Evidence Collection</title><link href="http://localhost:4000/blog/IRandTHSeries/EvidenceCollection" rel="alternate" type="text/html" title="Incident Response &amp;amp; Threat Hunting Series, Evidence Collection" /><published>2024-05-03T19:45:00+03:00</published><updated>2024-05-03T19:45:00+03:00</updated><id>http://localhost:4000/blog/IRandTHSeries/Evidence-Collection</id><content type="html" xml:base="http://localhost:4000/blog/IRandTHSeries/EvidenceCollection">&lt;p&gt;&lt;strong&gt;KAPE Targets&lt;/strong&gt;
Let’s explore the concept of Triage Acquisition within the context of Incident Response and Threat Hunting. &lt;br /&gt;
Triage Acquisition involves obtaining specific files or artifacts that provide insights into the system’s state we are analyzing.&lt;/p&gt;

&lt;p&gt;In a simplified lessons series focused on Evidence Acquisition at the AD Environment level, we’ll discuss several ideas. In this video, we’ll delve into the first concept: using KAPE Targets. This tool stands out for its effectiveness in evidence collection.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=JJVuo8aLcYw&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Evidence Collection: KAPE [ARABIC]&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Custom Evidence Collection&lt;/strong&gt;
In this lesson, we’ll explore the second concept: collecting evidence when there are no known pre-defined artifacts or targets.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=MhqU3UN4kME&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Evidence Collection: Custom [ARABIC]&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Offline Collection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the previous lessons, the execution relied on a fundamental point: running Velociraptor as a Client/Server role.&lt;/p&gt;

&lt;p&gt;Now, in this lesson, we will explore a completely different execution method that enables us to collect evidence even when communication with the client systems is challenging. This could be due to the absence of communication via Public IP or the difficulty of our physical presence on site to perform the acquisition task as Incident Responders.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=J6TNlQzbCZw&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Evidence Collection: Offline [ARABIC]&lt;/a&gt;&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="Incident Response &amp; Threat Hunting Series" /><summary type="html">KAPE Targets Let’s explore the concept of Triage Acquisition within the context of Incident Response and Threat Hunting. Triage Acquisition involves obtaining specific files or artifacts that provide insights into the system’s state we are analyzing.</summary></entry><entry><title type="html">Incident Response &amp;amp; Threat Hunting Series, Autoruns</title><link href="http://localhost:4000/blog/IRandTHSeries/Autoruns" rel="alternate" type="text/html" title="Incident Response &amp;amp; Threat Hunting Series, Autoruns" /><published>2024-05-03T19:30:00+03:00</published><updated>2024-05-03T19:30:00+03:00</updated><id>http://localhost:4000/blog/IRandTHSeries/Autoruns</id><content type="html" xml:base="http://localhost:4000/blog/IRandTHSeries/Autoruns">&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;
Let’s say our objective is to determine whether there is persistence during system boot or login, one of the most straightforward and effective methods is to use Microsoft Sysinternals Autoruns.&lt;/p&gt;

&lt;p&gt;Another point we’ll address in this lesson is whether the presence of verified applications at the AD Environment level is sufficient evidence to trust these applications. &lt;br /&gt;
Specifically, we’ll explore how to recognize and detect the technique known as “Subvert Trust Controls: Install Root Certificate” (T1553.004). &lt;br /&gt;
To achieve this, we’ll need to analyze the behavior of applications, their digital signatures, and any potential deviations from expected trust controls.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=Qua-fypWhnk&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Autoruns [ARABIC]&lt;/a&gt;&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="Incident Response &amp; Threat Hunting Series" /><category term="Persistence" /><summary type="html">Description Let’s say our objective is to determine whether there is persistence during system boot or login, one of the most straightforward and effective methods is to use Microsoft Sysinternals Autoruns.</summary></entry><entry><title type="html">Incident Response &amp;amp; Threat Hunting Series, Search Files &amp;amp; Content</title><link href="http://localhost:4000/blog/IRandTHSeries/SearchFilesandContent" rel="alternate" type="text/html" title="Incident Response &amp;amp; Threat Hunting Series, Search Files &amp;amp; Content" /><published>2024-05-03T19:15:00+03:00</published><updated>2024-05-03T19:15:00+03:00</updated><id>http://localhost:4000/blog/IRandTHSeries/Search-Files-and-Content</id><content type="html" xml:base="http://localhost:4000/blog/IRandTHSeries/SearchFilesandContent">&lt;p&gt;&lt;strong&gt;Search Files &amp;amp; Content: Introduction&lt;/strong&gt;
This lesson will be an introductory overview for a short sub-series focused on the topic of file search and their contents within the AD Environment. The search method will vary based on the available data, whether it’s the file name, hash, or distinctive content of these files&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=c8Jc904VQXI&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Search Files &amp;amp; Content: Introduction [ARABIC]&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Search Files &amp;amp; Content: Known File Name&lt;/strong&gt;
In this lesson, we will discuss the first point in the series of searching for files and their contents at the AD Environment level. &lt;br /&gt;
Let’s assume, for example, that we have a specific file name and we want to know whether it exists in our Environment or not, whether we have prior knowledge of the folder that contains it or not.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most important point in this lesson is that the MFT (Master File Table) is an open book that we can search directly without the need to obtain it or even parse its contents. Taking this point into consideration, we can increase the effectiveness of dealing with this type of search and avoid the conventional search for files.
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=lik8OD6gPiY&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Search Files &amp;amp; Content: Known File Name [ARABIC]&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Search Files &amp;amp; Content: Hash&lt;/strong&gt;
In this lesson, we will delve into the second point of the file search and its contents within the AD Environment series.&lt;/p&gt;

&lt;p&gt;In the previous lesson, we explored how to search for files when we have prior knowledge of the file name. However, let’s assume that the file’s name has been changed, and its location is unknown. But we have complete knowledge of the file’s content and, consequently, its unique hash. &lt;br /&gt;
In this scenario, the previous search method won’t be effective, and our next option will be to use the hash in several efficient ways to access the desired files.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=I6gJIyBI9r0&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Search Files &amp;amp; Content: Hash [ARABIC]&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Search Files &amp;amp; Content: YARA&lt;/strong&gt;
In this lesson, we will explore the third point in the series of searching for files and their contents within the AD Environment.&lt;/p&gt;

&lt;p&gt;In the previous lessons, we learned how to search for files:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;By knowing the file name, whether we have prior knowledge of the folder containing it or not.&lt;/li&gt;
  &lt;li&gt;By having complete knowledge of the file’s content and its hash.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what if we don’t have all this information?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Let’s assume, for example, that the desired content is inside a compressed file, and we don’t know the file name or its location. In such cases, our expected option would be to search for distinctive content within files using YARA rules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=SHIfnCqIg0I&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Search Files &amp;amp; Content: YARA [ARABIC]&lt;/a&gt;&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="Incident Response &amp; Threat Hunting Series" /><summary type="html">Search Files &amp;amp; Content: Introduction This lesson will be an introductory overview for a short sub-series focused on the topic of file search and their contents within the AD Environment. The search method will vary based on the available data, whether it’s the file name, hash, or distinctive content of these files</summary></entry><entry><title type="html">Incident Response &amp;amp; Threat Hunting Series, Asset Inventory</title><link href="http://localhost:4000/blog/IRandTHSeries/AssetInventory" rel="alternate" type="text/html" title="Incident Response &amp;amp; Threat Hunting Series, Asset Inventory" /><published>2024-05-03T19:00:00+03:00</published><updated>2024-05-03T19:00:00+03:00</updated><id>http://localhost:4000/blog/IRandTHSeries/Asset-Inventory</id><content type="html" xml:base="http://localhost:4000/blog/IRandTHSeries/AssetInventory">&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;
Starting from this lesson, we will begin using various and different artifacts to form a clear picture of several important aspects in the field of Incident Response and Threat Hunting. &lt;br /&gt;
In this lesson, our main topic will be Asset Inventory.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The goal is to obtain information similar to the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Basic information about the systems being analyzed.&lt;/li&gt;
  &lt;li&gt;What are the Internal IP Addresses, even in cases where there are multiple network interfaces for these systems.&lt;/li&gt;
  &lt;li&gt;What are the Public IP Addresses of the analyzed systems.&lt;/li&gt;
  &lt;li&gt;What are the Firewall Rules present on the systems, in case you want to identify outliers.&lt;/li&gt;
  &lt;li&gt;Who are the Local Administrators on the systems, if you want to identify outliers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the topic may seem simple on the surface, it has a significant impact on understanding incidents and handling them efficiently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=amI-4H8-otc&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Asset Inventory [ARABIC]&lt;/a&gt;&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="Incident Response &amp; Threat Hunting Series" /><summary type="html">Description Starting from this lesson, we will begin using various and different artifacts to form a clear picture of several important aspects in the field of Incident Response and Threat Hunting. In this lesson, our main topic will be Asset Inventory.</summary></entry><entry><title type="html">Incident Response &amp;amp; Threat Hunting Series, Velociraptor EDR GUI Introduction</title><link href="http://localhost:4000/blog/IRandTHSeries/VelociraptorEDRGUI" rel="alternate" type="text/html" title="Incident Response &amp;amp; Threat Hunting Series, Velociraptor EDR GUI Introduction" /><published>2024-05-03T18:45:00+03:00</published><updated>2024-05-03T18:45:00+03:00</updated><id>http://localhost:4000/blog/IRandTHSeries/Velociraptor-EDR-GUI-Introduction</id><content type="html" xml:base="http://localhost:4000/blog/IRandTHSeries/VelociraptorEDRGUI">&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;
After we installed Velociraptor in the Active Directory Domain Environment in the previous videos, it’s time to explore the important pivotal points in the user interface that will appear to us as Incident Responders, and how to perform a simple Hunt as a prelude to more advanced topics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=h4MzEXtdAKY&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR GUI Introduction [ARABIC]&lt;/a&gt;&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="Incident Response &amp; Threat Hunting Series" /><summary type="html">Description After we installed Velociraptor in the Active Directory Domain Environment in the previous videos, it’s time to explore the important pivotal points in the user interface that will appear to us as Incident Responders, and how to perform a simple Hunt as a prelude to more advanced topics.</summary></entry><entry><title type="html">Incident Response &amp;amp; Threat Hunting Series, Velociraptor EDR Deployment in an AD Domain</title><link href="http://localhost:4000/blog/IRandTHSeries/VelociraptorEDRDeployment" rel="alternate" type="text/html" title="Incident Response &amp;amp; Threat Hunting Series, Velociraptor EDR Deployment in an AD Domain" /><published>2024-05-03T18:30:00+03:00</published><updated>2024-05-03T18:30:00+03:00</updated><id>http://localhost:4000/blog/IRandTHSeries/Velociraptor-EDR-Deployment</id><content type="html" xml:base="http://localhost:4000/blog/IRandTHSeries/VelociraptorEDRDeployment">&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;
Collecting evidence and obtaining information and artifacts is one of the most important stages during incident handling, especially when dealing with hundreds or thousands of systems. In this series, we will use Velociraptor Open-source EDR for its many advantages that facilitate expected tasks during Incident Response and Threat Hunting. There are more than one way to deploy Velociraptor, and we will explore two methods in this series:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Agentless Deployment.&lt;/li&gt;
  &lt;li&gt;Deployment as a service.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Agentless Deployment&lt;/strong&gt;
To deploy Velociraptor as Agentless, we can follow this lesson &lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=DmKhLo5n5lE&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Agentless Deployment [ARABIC]&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDR Deployment as a Service&lt;/strong&gt;
To apply the second method, which is Deployment as a service we can follow the below link &lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=00vVfBWwxes&quot;&gt;IR &amp;amp; TH Series - Velociraptor EDR Deployment as a Service [ARABIC]&lt;/a&gt; &lt;br /&gt;
The benefit of using this method is the presence of the Velociraptor Service even after a system restart.&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="Incident Response &amp; Threat Hunting Series" /><summary type="html">Description Collecting evidence and obtaining information and artifacts is one of the most important stages during incident handling, especially when dealing with hundreds or thousands of systems. In this series, we will use Velociraptor Open-source EDR for its many advantages that facilitate expected tasks during Incident Response and Threat Hunting. There are more than one way to deploy Velociraptor, and we will explore two methods in this series: Agentless Deployment. Deployment as a service.</summary></entry><entry><title type="html">Incident Response &amp;amp; Threat Hunting Series, Introduction</title><link href="http://localhost:4000/blog/IRandTHSeries/Introduction" rel="alternate" type="text/html" title="Incident Response &amp;amp; Threat Hunting Series, Introduction" /><published>2024-05-03T18:15:00+03:00</published><updated>2024-05-03T18:15:00+03:00</updated><id>http://localhost:4000/blog/IRandTHSeries/Introduction</id><content type="html" xml:base="http://localhost:4000/blog/IRandTHSeries/Introduction">&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;
This post is a reflection to the first video in a series of specialized educational videos covering various important topics in cybersecurity. The series includes practical implementation and direct execution of all the ideas we discuss. The goal is to spread knowledge related to cybersecurity.&lt;/p&gt;

&lt;p&gt;I hope one day I will provide an English version of all the content that is available in Arabic.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link&lt;/strong&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=pEqWismot-8&quot;&gt;IR &amp;amp; TH Series - Introduction [ARABIC]&lt;/a&gt;&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="Incident Response &amp; Threat Hunting Series" /><summary type="html">Description This post is a reflection to the first video in a series of specialized educational videos covering various important topics in cybersecurity. The series includes practical implementation and direct execution of all the ideas we discuss. The goal is to spread knowledge related to cybersecurity.</summary></entry><entry><title type="html">How to find out if there is persistence using WMI?</title><link href="http://localhost:4000/blog/IRC/Persistence-WMI" rel="alternate" type="text/html" title="How to find out if there is persistence using WMI?" /><published>2021-04-10T17:16:00+03:00</published><updated>2021-04-10T17:16:00+03:00</updated><id>http://localhost:4000/blog/IRC/Persistence-WMI</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Persistence-WMI">&lt;p&gt;If you would like to know about WMI, this post explains &lt;a href=&quot;https://hejelylab.github.io/blog/DigitalForensics/WMI&quot;&gt;WMI in Details&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s check 3rd medium challenge (WhoaMI) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;h3 id=&quot;14th-challenge&quot;&gt;14th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge states there is a persistence mechanism that’s related to powershell and CMD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll parse OBJECTS.DAT WMI repository file using PyWMIPersistenceFinder.py
You can find the tool here: &lt;a href=&quot;https://github.com/davidpany/WMI_Forensics&quot;&gt;PyWMIPersistenceFinder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;C:\temp\addadmin.ps1&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Persistence" /><summary type="html">If you would like to know about WMI, this post explains WMI in Details</summary></entry><entry><title type="html">Windows Management Instrumentation (WMI)</title><link href="http://localhost:4000/blog/DigitalForensics/WMI" rel="alternate" type="text/html" title="Windows Management Instrumentation (WMI)" /><published>2021-04-10T17:15:00+03:00</published><updated>2021-04-10T17:15:00+03:00</updated><id>http://localhost:4000/blog/DigitalForensics/WMI</id><content type="html" xml:base="http://localhost:4000/blog/DigitalForensics/WMI">&lt;h3 id=&quot;what-is-windows-management-instrumentation-wmi&quot;&gt;What is Windows Management Instrumentation (WMI)?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;WMI is a feature which allows querying, collecting, and managing Windows OS components eihter locally or remotely&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;A bit Longer Definition&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;WMI is a Microsoft implementation of Web-Based Enterprise Management (WBEM) in Windows OS&lt;br /&gt;&lt;br /&gt;
What is WBEM?&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;It is an open standard called the Web-Based Enterprise Management (WBEM) which aims to exchange Comon Information Model (CIM) data between systems&lt;br /&gt;&lt;br /&gt;
What is CIM?&lt;/li&gt;
    &lt;li&gt;It is a data model standard which allows hardware, Operating Systems or applications for example to define classes that represent the different components they have. An example would be a class that represents information about hardisk&lt;br /&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Example&lt;/strong&gt;
I would like to know the details about services on my system, and in specific DHCP service. I would write the following powershell command&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/CIMV2 -ClassName CIM_Service | Where-Object {$_.Name -eq &quot;dhcp&quot;}&lt;/code&gt;&lt;br /&gt;
With WMI, we are able to have powerful tasks gets accomplished such as creating processes remotely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is WMI organized?&lt;/strong&gt;
It is organized into Namespaces &amp;gt; Classes &amp;gt; Instances &lt;br /&gt;
Essentially, namespace may contain different classes, and classes can have one or more instances.
This is clear in the previous example, another example where there is one instance for this class&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/CIMV2 -ClassName Win32_OperatingSystem&lt;/code&gt;&lt;br /&gt;
output is the OS instance information&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does WMI provide us info about the operating system?&lt;/strong&gt;
This could be understood by looking at WMI architecture&lt;/p&gt;

&lt;h3 id=&quot;wmi-architecture&quot;&gt;WMI Architecture&lt;/h3&gt;
&lt;p&gt;WMI consists of 3 components:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;WMI Providers &amp;amp; Managed Objects&lt;br /&gt;
      So for any component to have its information available via WMI. It needs to have a provider which handles requests and queries about this object
    &lt;ul&gt;
      &lt;li&gt;Providers consist of two components which are&lt;br /&gt;
        &lt;ul&gt;
          &lt;li&gt;DLL File&lt;/li&gt;
          &lt;li&gt;Managed Object Format (MOF)
            &lt;ul&gt;
              &lt;li&gt;CIM scripts which describe classes that are available in WMI repository.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WMI Infrastructure&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;WMI core (WMI service) and WMI repository (C:\Windows\System32\wbem\repository)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WMI Consumers&lt;br /&gt;
  These are basically what can query WMI repository such as
    &lt;ul&gt;
      &lt;li&gt;Powershell&lt;/li&gt;
      &lt;li&gt;WMIC (WMI command-line utility)&lt;/li&gt;
      &lt;li&gt;Programming languages such as C#, C++, VB, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;how-to-access-wmi-repository&quot;&gt;How to access WMI repository?&lt;/h3&gt;
&lt;p&gt;Using one of two protocols which are&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Distributed Component Object Model (DCOM)
    &lt;ul&gt;
      &lt;li&gt;First, What is COM?
        &lt;blockquote&gt;
          &lt;p&gt;COM is a standard which specifies how objects or components can interact with other components whether they are in the same process or in different processes on the same computer&lt;br /&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;What is DCOM?
        &lt;blockquote&gt;
          &lt;p&gt;DCOM is the idea of having components or objects interact with other components even if they are in different systems&lt;br /&gt;
  For a component to request a service from another component in another system, this request can be forwarded to Remote Procedure Call (RPC) protocol which acts as the transmission protocol&lt;br /&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WinRM
    &lt;ul&gt;
      &lt;li&gt;WinRM is Microsoft implementation of protocol called WSMAN.
        &lt;ul&gt;
          &lt;li&gt;What is WSMAN?&lt;br /&gt;
            &lt;blockquote&gt;
              &lt;p&gt;It is a messaging protocol for exchanging information between a server and a client. It often relies on HTTP.&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wmi-attacks&quot;&gt;WMI Attacks&lt;/h3&gt;
&lt;p&gt;WMI can be leveraged by attackers in several post exploitation phases&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reconnaissance&lt;/li&gt;
  &lt;li&gt;Privilege Escalation&lt;/li&gt;
  &lt;li&gt;Lateral Movement&lt;/li&gt;
  &lt;li&gt;Persistence&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;I will explain with examples how WMI is used in only the latter two phases: Lateral movement &amp;amp; Persistence&lt;br /&gt;
In addition, I’ll explain approaches to detect them&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wmi-lateral-movement&quot;&gt;WMI Lateral Movement&lt;/h3&gt;
&lt;p&gt;Two examples to perform lateral movement using WMI are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;wmi process call create&lt;/li&gt;
  &lt;li&gt;wmiexec.py&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a fileless lateral movement, no need for the existence of any file on the target system, WMI will achieve the task&lt;br /&gt;
Communication will appear over port TCP 135 in the beginning, and then later a random port will be used after negotiation succeeds between the two systems&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;WMI Lateral Movement Detection Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Scenario&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In this example we will run “CMD /c ipconfig.exe” on remote system using WMIC command line utility, and confirm the observed events in both source and target systems.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Used WMIC command&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmic.exe /NODE:172.16.1.12 /USER:&quot;hejelylab\Administrator&quot; /PASSWORD:&quot;UserPassword&quot; process call create &quot;cmd.exe /c ipconfig.exe&quot;&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Eventlogs
    &lt;ul&gt;
      &lt;li&gt;Security Event logs&lt;br /&gt;
      You need to have Command Line Auditing Enabled.
      No logs appeared to me in this example if command line logging is not enabled and sysmon is not installed.
        &lt;ul&gt;
          &lt;li&gt;Source
            &lt;ul&gt;
              &lt;li&gt;Security logs, event ID: 4688
                &lt;ul&gt;
                  &lt;li&gt;Process name: WMIC.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: powershell.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Target
            &lt;ul&gt;
              &lt;li&gt;Security logs, event ID: 4688
                &lt;ul&gt;
                  &lt;li&gt;Process name: cmd.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: WmiPrvSE.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Security logs, event ID: 4688
                &lt;ul&gt;
                  &lt;li&gt;Process name: ipconfig.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: cmd.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Sysmon Event logs
        &lt;ul&gt;
          &lt;li&gt;Source
            &lt;ul&gt;
              &lt;li&gt;Sysmon logs, event ID: 1
                &lt;ul&gt;
                  &lt;li&gt;Process name: WMIC.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: powershell.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Target
            &lt;ul&gt;
              &lt;li&gt;Sysmon logs, event ID: 1
                &lt;ul&gt;
                  &lt;li&gt;Process name: cmd.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: WmiPrvSE.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Sysmon logs, event ID: 1
                &lt;ul&gt;
                  &lt;li&gt;Process name: ipconfig.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: cmd.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-1_WMI.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wmi-persistence&quot;&gt;WMI Persistence&lt;/h3&gt;
&lt;p&gt;WMI persistence can be achieved via WMI event subscription for example&lt;br /&gt;
Steps: &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An MOF file gets created&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;MOF file contains the following:&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;Event Trigger (Class __EventFilter)
        &lt;ul&gt;
          &lt;li&gt;An example, event trigger is a specific date, an event that occurs on the system (notepad.exe starts)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event Consumer (Class __EventConsumer)
        &lt;ul&gt;
          &lt;li&gt;What will happen once the trigger occurs, for example, run a specific script command.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Binding (class __FilterToConsumerBinding)
        &lt;ul&gt;
          &lt;li&gt;This  what binds the consumer to the trigger.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Compile MOF file
    &lt;ul&gt;
      &lt;li&gt;Using mofcomp.exe&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Persistence is achieved!!!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;WMI Persistence Detection Examples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Example&lt;/strong&gt;
Scenario&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A MOF file is dropped to system&lt;/li&gt;
  &lt;li&gt;The MOF file gets compiled using mofcomp.exe (mofcomp is spawned by powershell) &lt;br /&gt;
WMI event consumer event is executed (The example here is to run BATCH script which will execute cmd)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detection&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sysmon
    &lt;ul&gt;
      &lt;li&gt;Event ID 1: powershell &amp;gt; mofcomp.exe .\a.mof&lt;/li&gt;
      &lt;li&gt;Event ID 20: WmiConsumerEvent&lt;/li&gt;
      &lt;li&gt;Event ID 21: WmiBindingEvent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WMI-Activity Operational Log
    &lt;ul&gt;
      &lt;li&gt;Event ID 5861: records permanent event consumer creation&lt;br /&gt;
&lt;img src=&quot;/blog/assets/images/210410-2_WMI.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Security
    &lt;ul&gt;
      &lt;li&gt;Event ID 4688: powershell &amp;gt; mofcomp.exe .\a.mof&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All events in one table
&lt;img src=&quot;/blog/assets/images/210410-3_WMI.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note (Different example): Sysmon also triggers for WMI event filter in Event ID: 19.
&lt;img src=&quot;/blog/assets/images/210410-4_WMI.png&quot; alt=&quot;fourth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Example,WMI detection using WMI&lt;/strong&gt;
I will compile the following MOF file in advance to view valid results of WMI detection using WMI&lt;br /&gt;
Executed command: mofcomp.exe .\LogonTime.mof&lt;br /&gt;
LogonTime.mof&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Purpose: After being compile, for any interactive logon “LogonType=2”, CMD will be run and echo date and time into “C:\Users\administrator\Downloads\LogonTime.txt”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LogonTime.mof Content&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;#pragma namespace (“\\.\root\subscription”)&lt;br /&gt;
instance of __EventFilter as $FILTER&lt;br /&gt;
{&lt;br /&gt;
    Name = “VBScript Filter”;&lt;br /&gt;
    EventNamespace = “root\cimv2”;&lt;br /&gt;
 Query = “SELECT * FROM __InstanceCreationEvent WITHIN 5 WHERE (TargetInstance ISA ‘Win32_LogonSession’ AND (TargetInstance.LogonType = 2))”;&lt;br /&gt;
    QueryLanguage = “WQL”;&lt;br /&gt;
};&lt;br /&gt;
instance of ActiveScriptEventConsumer as $CONSUMER&lt;br /&gt;
{&lt;br /&gt;
    Name = “VBScript CMD Consumer”;&lt;br /&gt;
    ScriptingEngine = “VBScript”;&lt;br /&gt;
    ScriptText =
      “Set objShell = CreateObject(&quot;WScript.Shell&quot;)\n”
   “objShell.Run &quot;C:\Windows\system32\cmd.exe /C echo %date%%time% &amp;gt; C:\Users\administrator\Downloads\LogonTime.txt&quot;\n”;&lt;br /&gt;
};&lt;br /&gt;
instance of __FilterToConsumerBinding&lt;br /&gt;
{&lt;br /&gt;
    Consumer = $CONSUMER ;&lt;br /&gt;
    Filter = $FILTER ;&lt;br /&gt;
};&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once logging out and logging again interactively, ipconfig will be executed.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Remember that MOF contains&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;trigger filter (__EventFilter),&lt;/li&gt;
    &lt;li&gt;consumer (__EventConsumer), and&lt;/li&gt;
    &lt;li&gt;Binding (__FilterToConsumerBinding)&lt;br /&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
We can fetch this infomation using the following powershell cmdlets&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/subscription -ClassName __EventFilter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-5_WMI.png&quot; alt=&quot;fifth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/subscription -ClassName __EventConsumer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-6_WMI.png&quot; alt=&quot;sixth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-7_WMI.png&quot; alt=&quot;seventh screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Example&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;WMI Repository file
    &lt;ul&gt;
      &lt;li&gt;File Name: OBJECTS.DAT&lt;/li&gt;
      &lt;li&gt;Location: C:\Windows\System32\wbem\Repository&lt;/li&gt;
      &lt;li&gt;Purpose: this file contains WMI executed commands on system. We can pull it andexamine it&lt;br /&gt;
  I wrote an example of how to do this in this post &lt;a href=&quot;https://hejelylab.github.io/blog/IRC/Persistence-WMI&quot;&gt;WMI Persistence Example&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.varonis.com/blog/wmi-windows-management-instrumentation/&lt;/li&gt;
  &lt;li&gt;https://www.fireeye.de/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=aBQ1vEjK6v4&lt;/li&gt;
  &lt;li&gt;https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/&lt;/li&gt;
  &lt;li&gt;https://www.hackingarticles.in/lateral-movement-wmi/&lt;/li&gt;
  &lt;li&gt;https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="Digital Forensics" /><category term="Lateral Movement" /><category term="Persistence" /><summary type="html">What is Windows Management Instrumentation (WMI)?</summary></entry><entry><title type="html">How to identify malicious processes by comparing an infected memory image with a clean baseline one?</title><link href="http://localhost:4000/blog/IRC/Memory-CompareImages" rel="alternate" type="text/html" title="How to identify malicious processes by comparing an infected memory image with a clean baseline one?" /><published>2021-03-28T00:00:00+03:00</published><updated>2021-03-28T00:00:00+03:00</updated><id>http://localhost:4000/blog/IRC/Memory-CompareImages</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Memory-CompareImages">&lt;p&gt;Let’s check 1st advanced challenge (2nd Base) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;h3 id=&quot;13th-challenge&quot;&gt;13th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge tells there is a malicious process in a memory image and asked if we can identify this by comparing the memory image against another clean memory image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210328-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First thing we will do is confirming the memory image profile using imageinfo against one of the two images&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vol.py -f DESKTOP-HUB666E-20191101-155228.dmp imageinfo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210328-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now, since the challenge asks about suspicious process, we’ll use processbl plugin which compares the processes of an images to processes of a baseline image&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Two options to be used in comparison, display&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Ony unknown by using -U option&lt;/li&gt;
      &lt;li&gt;Only known by using -K option&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DESKTOP-HUB666E-20200209-162404.dmp --profile=Win10x64_15063 processbl -B ../BaseLine/DESKTOP-HUB666E-20191101-155228.dmp -U 2&amp;gt;/dev/null&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210328-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The suspicious process appears to be whatsapp with PID:5392, this is due to spwaning CMD process (3352)&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the Challenge:&lt;/h3&gt;
&lt;p&gt;whatsapp.exe&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;side-note&quot;&gt;Side note&lt;/h3&gt;
&lt;p&gt;With same approach with comparing processes between images, we can compare drivers and services using plugins&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;servicebl&lt;/li&gt;
  &lt;li&gt;driverbl&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Memory Investigation" /><summary type="html">Let’s check 1st advanced challenge (2nd Base) in (incident-response-challenge.com) website and try to solve it.</summary></entry></feed>