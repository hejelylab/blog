<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2021-03-02T21:02:57+03:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Hejely Lab</title><subtitle>Welcome to this blog.</subtitle><author><name>HejelyLab</name></author><entry><title type="html">How to find out if there is persistence using Registry run keys or Startup Folders?</title><link href="http://localhost:4000/blog/IRC/Persistence-Registry-Run-Keys" rel="alternate" type="text/html" title="How to find out if there is persistence using Registry run keys or Startup Folders?" /><published>2021-03-02T18:15:00+03:00</published><updated>2021-03-02T18:15:00+03:00</updated><id>http://localhost:4000/blog/IRC/Persistence-Registry-Run-Keys</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Persistence-Registry-Run-Keys">&lt;p&gt;Out of many persistence techniques, one of the most common ones is the usage of Registry run Keys or Startup Folders. This will cause an added application to be executed whenever a user logs in.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-are-the-startup-folders&quot;&gt;What are the startup folders?&lt;/h3&gt;
&lt;p&gt;They are folders that are checked whenever each user logs in&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;First path is under each user’s profile&lt;br /&gt;
C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Second path is system wide path for all users&lt;br /&gt;
C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;registry-run-keys&quot;&gt;Registry-Run-Keys&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Most used run keys for persistence are &lt;br /&gt;
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;Registry Parsing Tools&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;Registry explorer (SYSTEM Hive)&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;RECmd&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;RegRipper&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;etc.&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 7th easy challenge (Sports) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tools here will be Registry Explorer to navigate through the registry keys&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;10th-challenge&quot;&gt;10th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge asks to look at the user’s profile “Sansa”, as there might be something when waking up!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210302-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll parse NTUSER.DAT of the mentioned user, and navigate to Run (User run key) using the existing bookmarked keys.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210302-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see an executable runs everytime this user logs in, which is under public user profile&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210302-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;Frag-AGREWEHDFG.exe&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://attack.mitre.org/techniques/T1547/001/&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Persistence" /><summary type="html">Out of many persistence techniques, one of the most common ones is the usage of Registry run Keys or Startup Folders. This will cause an added application to be executed whenever a user logs in.</summary></entry><entry><title type="html">How to prove there was a lateral movement using PsExec via EventLogs?</title><link href="http://localhost:4000/blog/IRC/Lateral-Movement-PsExec" rel="alternate" type="text/html" title="How to prove there was a lateral movement using PsExec via EventLogs?" /><published>2021-02-21T19:45:00+03:00</published><updated>2021-02-21T19:45:00+03:00</updated><id>http://localhost:4000/blog/IRC/Lateral-Movement-PsExec</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Lateral-Movement-PsExec">&lt;p&gt;In a digital forensics investigation, one of the important points to look for is lateral movement between systems in the environment. This post shows how to prove if there was lateral movement through Sysinternal PsExec tool using only Windows EventLogs as an evidence artifacts.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-is-psexec&quot;&gt;What is PsExec?&lt;/h3&gt;
&lt;p&gt;It’s a tool that lets you execute processes on other systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An example of PsExec executing commands remotely&lt;/strong&gt;
Let’s say we want to open a CMD window on a remote system&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psexec \\RemoteIP -u DomainName\UserName -p UserPassword cmd&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Break it down&lt;br /&gt;
we have psexec already installed on our system, and we run it from CMD connecting to a RemoteIP system with a valid username/password there, and eventually start a CMD instance on the other system&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does PsExec execute commands remotely?&lt;/strong&gt;
Through interacting with Service Control Manager (SCM) via the network either through&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remote Procedure Call (RPC) or&lt;/li&gt;
  &lt;li&gt;Server Message Block (SMB).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PsExec Execution Steps (Example)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Authentication completed on the target system&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;An Administrative share is mapped&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;PsExec service binary (PSEXESVC) is copied to the mapped share&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;PsExec communicates with SCM via the network to start the service binary (PSEXESVC)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Starts the intended process/application on the target system&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;psexec-detection-via-eventlogs&quot;&gt;PsExec Detection via EventLogs&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Source System&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Security logs&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;Event ID: 4688 (PsExec Process Creation)&lt;/li&gt;
      &lt;li&gt;Event ID: 4689 (PsExec Process has been exited)&lt;/li&gt;
      &lt;li&gt;Event ID: 4648
        &lt;ul&gt;
          &lt;li&gt;Account Name(Under Subject section): the already logged on user on the source system&lt;/li&gt;
          &lt;li&gt;Account Name (Under Account whose credentials were used section): the used account on the target system&lt;/li&gt;
          &lt;li&gt;Target Server Name: target system&lt;/li&gt;
          &lt;li&gt;Process Name: Used process (if no change to PsExec name, the executable info will have PsExec)&lt;/li&gt;
          &lt;li&gt;Network Address: target IP&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Target System&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;System logs
    &lt;ul&gt;
      &lt;li&gt;Event ID: 7045 (PSEXESVC was installed)&lt;/li&gt;
      &lt;li&gt;Event ID: 7036 (PSEXESVC service state has changed)
        &lt;ul&gt;
          &lt;li&gt;This event should appear twice once service has started (Executing state), and the second time when the service gets stopped (Stopped state)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Security logs
    &lt;ul&gt;
      &lt;li&gt;Event ID: 4624
        &lt;ul&gt;
          &lt;li&gt;Successful logon&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 4672
        &lt;ul&gt;
          &lt;li&gt;Special privileges assigned to new logon&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 5140
        &lt;ul&gt;
          &lt;li&gt;A network share object was accessed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 5145
        &lt;ul&gt;
          &lt;li&gt;A network share object was checked to see whether client can be granted desired access&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 4656
        &lt;ul&gt;
          &lt;li&gt;A handle to an object was requested&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 4663
        &lt;ul&gt;
          &lt;li&gt;An attempt was made to access an object&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;Eventlogs Parsing/Viewing Tools&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;EvtxEcmd&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;Event Log Explorer&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;Timeline Explorer&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;etc.&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 4th medium challenge (Kiwi) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tools here will be EvtxEcmd to parse eventlogs, and Timeline Explorer to view and filter eventlogs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;9th-challenge&quot;&gt;9th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge tells an appearance of kiwi logo (Mimikatz) appeared on DESKTOP-HUB666E (172.16.44.135), this is probably due to lateral movement from other systems.&lt;/p&gt;

&lt;p&gt;Provided evidence
	- DESKTOP-HUB666E eventlogs
	- WIN-IL7M7CC6UVU (DC) eventlogs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge Questions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provide another domain user account used by attacker aside from King-Slayer&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Provide target system IP when this user was used&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210221-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To solve this challenge, we’ll parse only Security and System eventlogs from the two systems provided eventlogs to detect if there is lateral movement occurred between them using PsExec&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Parsing Steps for each machine&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Copy only Security and System eventlogs into a directory named Logs2, for example.&lt;/li&gt;
  &lt;li&gt;Run EvtxECmd on each directory as mentioned below&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;EvtxEcmd used command&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DESKTOP-HUB666E (172.16.44.135)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EvtxECmd.exe -d &quot;C:\Users\%username%\Downloads\Challenges\Medium - PassTheHash - Event Logs - Kiwi\Challenge\KingSlayerHost- EventLogs\Logs2&quot; --csv . --csvf KingSlayerHost.csv&lt;/code&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;DC (WIN-IL7M7CC6UVU) (172.16.44.132)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EvtxECmd.exe -d &quot;C:\Users\%username%\Downloads\Challenges\Medium - PassTheHash - Event Logs - Kiwi\Challenge\DC-EventLogs\Logs2&quot; --csv . --csvf DC.csv&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s view the two file logs using Timeline Explorer&lt;/p&gt;

&lt;p&gt;To determine source of lateral movement we will use the mentioned event IDs 4688,4689, and 4648 looking for PsExec in them&lt;/p&gt;

&lt;p&gt;This event “4648” shows the execution of PsExec on Feb 9&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210221-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Event time: 2020-02-09 13:59:13&lt;br /&gt;
To break the event into what we know&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Subject Account Name: KingSlayer (Already logged on user)&lt;br /&gt;
Target User name: Daenerys (User account which will be used on the target system)&lt;br /&gt;
Target Server Name: WIN-IL7M7CC6UVU&lt;br /&gt;
Process Name: C:\temp\Niceone\PSTools\PsExec.exe&lt;br /&gt;
Target IP Address: 172.16.44.132&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;IP address of target machine: 172.16.44.132&lt;br /&gt;
Username: Daenerys&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;evidence-from-destination-system&quot;&gt;Evidence from destination system&lt;/h3&gt;

&lt;p&gt;Security logs, Event IDs: 4624 &amp;amp; 4672&lt;br /&gt;
Used pivot point: Daenerys&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210221-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;System logs, Event IDs: 7045 &amp;amp; 7036&lt;br /&gt;
Used pivot point: PSEXESVC&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210221-4.png&quot; alt=&quot;fourth screenshot&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;br /&gt;
In this example PSEXESVC service name wasn’t changed from default.
This can be changed; however, using -r option once executing PsExec in the source system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.jpcert.or.jp/english/pub/sr/20170612ac-ir_research_en.pdf&lt;/li&gt;
  &lt;li&gt;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4648&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/sysinternals/downloads/psexec&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Lateral Movement" /><summary type="html">In a digital forensics investigation, one of the important points to look for is lateral movement between systems in the environment. This post shows how to prove if there was lateral movement through Sysinternal PsExec tool using only Windows EventLogs as an evidence artifacts.</summary></entry><entry><title type="html">What information can you retrieve from lateral movement performed via RDP?</title><link href="http://localhost:4000/blog/IRC/RDP-Bitmap-Cache" rel="alternate" type="text/html" title="What information can you retrieve from lateral movement performed via RDP?" /><published>2021-02-16T01:20:00+03:00</published><updated>2021-02-16T01:20:00+03:00</updated><id>http://localhost:4000/blog/IRC/RDP-Bitmap-Cache</id><content type="html" xml:base="http://localhost:4000/blog/IRC/RDP-Bitmap-Cache">&lt;p&gt;In case of an investigation which consists of lateral movement using RDP, one of the most important evidence we would like to investigate is RDP bitmap Cache files.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-is-rdp-bitmap-cache&quot;&gt;What is RDP bitmap cache?&lt;/h3&gt;
&lt;p&gt;When a user connects to another system using RDP, small size (bitmap) images are stored in their RDP profile files, so that once the same image is to be used in the session it can be fetched/pulled quicker. And the overall RDP session experience is enhanced in case of a slow connection. This artifact can help us sometimes in identifying what was the user seeing in their RDP sessions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RDP Bitmap Cache Location (Every user profile)&lt;/strong&gt;
C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Microsoft\Terminal Server Client\Cache&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;RDP Bitmap Cache Parsing Tools&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;bmc-tools.py&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;This is the only tool I have used so far and it does the job perfectly&lt;br /&gt;
Tool Link: &lt;a href=&quot;https://github.com/ANSSI-FR/bmc-tools&quot;&gt;bmc-tools&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 8th medium challenge (Notes) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bmc-tools used command&lt;/strong&gt;
Note: Python needs to be installed beforehand&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir RDPBitMapOutput&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python bmc-tools.py -s &quot;C:\Users\%username%\Downloads\Challenges\Medium - BMCache - Notes\Challenge\littlefinger\AppData\Local\Microsoft\Terminal Server Client\Cache&quot; -d RDPBitMapOutput -b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;mkdir to create a folder that contains the output of bmc-tools script&lt;br /&gt;
-s to point to RDP bitmap cache folder&lt;br /&gt;
-b will provide one bitmap image which aggregates all bitmap images.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;8th-challenge&quot;&gt;8th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge tells that an access to Littlefinger’s session has been gained. 
Later, the attacker connected to DC using vary-adm’s account.
The provided evidence is the user’s profile as well as eventlogs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210216-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the first things to have in mind is what the attacker was seeing when they gained an access to Littlefinger’s sesion; Therefore, we’ll parse the RDP Bitmap Cache folder to know this using the aforementioned commmand.&lt;/p&gt;

&lt;p&gt;By looking at the aggregated bitmap image (it contains the word &lt;em&gt;collage&lt;/em&gt; in the name of the file), we notice a note that contains the mentioned user vary-adm account and his password&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210216-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;Uncutedition1@#&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><summary type="html">In case of an investigation which consists of lateral movement using RDP, one of the most important evidence we would like to investigate is RDP bitmap Cache files.</summary></entry><entry><title type="html">What folders were accessed by a specific user?</title><link href="http://localhost:4000/blog/IRC/folder-access" rel="alternate" type="text/html" title="What folders were accessed by a specific user?" /><published>2021-02-13T16:55:00+03:00</published><updated>2021-02-13T16:55:00+03:00</updated><id>http://localhost:4000/blog/IRC/folder-access</id><content type="html" xml:base="http://localhost:4000/blog/IRC/folder-access">&lt;p&gt;Sometimes we would like to know when investigating a user profile, if that user has accessed important folders, for example.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-are-shellbags&quot;&gt;What are Shellbags?&lt;/h3&gt;
&lt;p&gt;Shellbags are user’s registry keys which help in storing user’s view preferences of folders in Windows OS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
You visit a specific folder, modify the way items are presented in that folder. Once visiting the same folder again, the previous view preference is rendered from Shellbag registry keys.
Therefore, Shellbags may provide us an evidence of user’s access to folders.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Shellbags keys are in the following DAT files in each user’s profile (these two DAT files are considered user’s registry files/hives)&lt;br /&gt;&lt;/dt&gt;
  &lt;dd&gt;NTUSER.DAT&lt;/dd&gt;
  &lt;dd&gt;UsrClass.dat&lt;br /&gt;&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;NTUSER.DAT and UsrClass.dat Locations in each user’s profile&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;NTUSER.DAT&lt;br /&gt;&lt;/dt&gt;
    &lt;dd&gt;C:\Users\&amp;lt;username&amp;gt;\NTUSER.DAT&lt;br /&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;UsrClass.dat&lt;br /&gt;&lt;/dt&gt;
    &lt;dd&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Microsoft\Windows\UsrClass.dat&lt;br /&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;Once parsing the mentioned two DAT files, Shellbag keys are in the following locations&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;NTUSER.DAT\Software\Microsoft\Windows\Shell\BagMRU&lt;/dd&gt;
  &lt;dd&gt;NTUSER.DAT\Software\Microsoft\Windows\Shell\Bags&lt;/dd&gt;
  &lt;dd&gt;UsrClass.dat\Local Settings\Software\Microsoft\Windows\Shell\BagMRU&lt;/dd&gt;
  &lt;dd&gt;UsrClass.dat\Local Settings\Software\Microsoft\Windows\Shell\Bags&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Shellbag keys description&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;BagMRU&lt;br /&gt;&lt;/dt&gt;
    &lt;dd&gt;Stores actual directory structures of accessed folders&lt;br /&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;Bags&lt;br /&gt;&lt;/dt&gt;
    &lt;dd&gt;Stores actual folder customization data (window size, layout type, etc.)&lt;br /&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;Shellbags Parsing Tools&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;Windows ShellBag Parser&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;Shellbags.py&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;ShellBags Explorer (View both NTUSER.DAT and UsrClass.dat)&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;SBECmd&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;Registry Explorer&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;RECmd&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;etc.&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 1st medium challenge (Can’t touch this) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tool here will be ShellBags Explorer&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;7th-challenge&quot;&gt;7th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge asks if “Projects” folder was accessed in a specific time frame, and if so, confirm the folder recreation timestamp.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210213-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the provided evidence contains user’s profile files, we’ll view both registry files NTUSER.DAT and UsrClass.dat using ShellBags Explorer searching for “Projects” folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210213-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;12:41:26&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Shellbags" /><summary type="html">Sometimes we would like to know when investigating a user profile, if that user has accessed important folders, for example.</summary></entry><entry><title type="html">Was a USB connected to system?</title><link href="http://localhost:4000/blog/IRC/usb-investigation" rel="alternate" type="text/html" title="Was a USB connected to system?" /><published>2021-02-06T13:45:00+03:00</published><updated>2021-02-06T13:45:00+03:00</updated><id>http://localhost:4000/blog/IRC/usb-investigation</id><content type="html" xml:base="http://localhost:4000/blog/IRC/usb-investigation">&lt;p&gt;Sometimes, we would like to investigate if a USB connected to a system, and provide information related to the USB such as its&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Maker&lt;/li&gt;
  &lt;li&gt;Serial Number/UID&lt;/li&gt;
  &lt;li&gt;USB Connection Date/Time&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;usb-connection-investigation&quot;&gt;USB Connection Investigation&lt;/h3&gt;
&lt;p&gt;To investigate if a USB was connected or not, SYSTEM registry hive can be parsed looking for USBSTOR registry key.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;System Registry Files Location&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;%Windir%\System32\Config&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;One of which is SYSTEM hive&lt;/dd&gt;
  &lt;dt&gt;&lt;strong&gt;USBSTOR Registry Key Location inside SYSTEM hive&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;SYSTEM\CurrentControlSet\Enum\USBSTOR&lt;/dd&gt;
  &lt;dt&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/dt&gt;
  &lt;dt&gt;I have parsed SYSTEM hive and I noticed ControlSet00* and not CurrentControlSet&lt;br /&gt;&lt;/dt&gt;
  &lt;dd&gt;ControlSet001 is the last control set the system booted with&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;ControlSet002 is the last known good control set&lt;br /&gt;
&lt;br /&gt;&lt;/dd&gt;
  &lt;dt&gt;&lt;strong&gt;USB Investigation Tools&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;Registry explorer (SYSTEM Hive)&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;USB Detective&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;RECmd&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;RegRipper&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;etc.&lt;br /&gt;
&lt;br /&gt;&lt;/dd&gt;
  &lt;dt&gt;&lt;strong&gt;Hunt for USB Connection&lt;/strong&gt;&lt;/dt&gt;
  &lt;dt&gt;If you would like to know whenever a new external device is connected or enabled, look for this event ID&lt;br /&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;ul&gt;
      &lt;li&gt;Security Logs, Event ID: 6416&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 2nd easy challenge (Hello DoK) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tool here will be Registry Explorer&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;6th-challenge&quot;&gt;6th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge focuses on proving whether a USB was connected to system, and if so, provide its serial/UID number.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210206-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll parse SYSTEM hive using Registry Explorer and navigate to the following key USBSTOR
SYSTEM\ControlSet001\Enum\USBSTOR&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210206-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maker: SanDisk&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;Serial/UID: 4C530000281008116284&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;usb-connection-datestimes&quot;&gt;USB Connection Dates/Times&lt;/h3&gt;
&lt;p&gt;Using the same registry key USBSTOR, we are able to know more information with regards to USB connection/removal dates/times&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The first time this USB was connected&lt;/li&gt;
  &lt;li&gt;The last time this USB was connected&lt;/li&gt;
  &lt;li&gt;The last time this USB was removed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The followng screenshot shows these evidence&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210206-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;
1.https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-6416
2.https://www.13cubed.com/downloads/dfir_cheat_sheet.pdf&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><summary type="html">Sometimes, we would like to investigate if a USB connected to a system, and provide information related to the USB such as its Maker Serial Number/UID USB Connection Date/Time</summary></entry><entry><title type="html">Was a specific file deleted from filesystem?</title><link href="http://localhost:4000/blog/IRC/file-deletion-evidence" rel="alternate" type="text/html" title="Was a specific file deleted from filesystem?" /><published>2021-02-03T19:15:00+03:00</published><updated>2021-02-03T19:15:00+03:00</updated><id>http://localhost:4000/blog/IRC/file-deletion-evidence</id><content type="html" xml:base="http://localhost:4000/blog/IRC/file-deletion-evidence">&lt;p&gt;Sometimes, we would like to prove if a specific file existed at sometime in filesystem, and then got deleted. That is, the received image doesn’t have the file we’re looking for.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;journaling&quot;&gt;Journaling&lt;/h3&gt;
&lt;p&gt;Filesystems have the concept of journaling which allows the OS to keep a track of changes that are made to the filesystem itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NTFS FileSystem&lt;/strong&gt;
NTFS filesystem has two journal types&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;USN Journal&lt;br /&gt;
 Purpose: keep track of changes to files/directories in the filesystem with the reason of each and every change&lt;br /&gt;
 Location: C:\$Extend\$USNJOURNAL&lt;br /&gt;
 $USNJOURNAL contains both $MAX and $J files&lt;br /&gt;
 What we’re mostly interested in is the $J file where a track of changes to files and folders are recorded&lt;/li&gt;
  &lt;li&gt;LogFile ($LOGFILE)&lt;br /&gt;
 This file keeps a track of changes to $MFT file&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Journals Parsing Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ANJP&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;MFTECMD&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;etc.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 2nd medium challenge (CopyPaSTe) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tool here will be MFTECMD&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MFTECMD used command&lt;/strong&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MFTECmd.exe -f &quot;C:\Users\%username%\Downloads\Challenges\Medium - NTFS Journal Forensics - Copy PaSTe\Challenge\Artifacts-J\$J&quot; --csv . --csvf J_CSV.csv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-f points to $J file&lt;br /&gt;
I’ve already downloaded the question evidence into my current Downloads folder.&lt;/p&gt;

&lt;p&gt;–csv . means create csv file in the same current directory&lt;br /&gt;
–csvf means name the outputted csv file this way&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;5th-challenge&quot;&gt;5th Challenge&lt;/h3&gt;

&lt;p&gt;This challenges focuses on proving whether a specific file related to (John’s E-Mail data) has existed previously on Theon’s system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210203-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the question’s artifacts are only $MFT and Journaling files.
We’ll parse $J using MFTECMD to find out if such a file existed on the system or not using the mentioned above command&lt;/p&gt;

&lt;p&gt;As we can see in the outputted CSV file after some filtration to only include files that have the word “john”, the following entries are seen. Evidently, PST file was created and then deleted from the file system&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210203-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;File Name: JohnSnowPST.pst&lt;br /&gt;&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="NTFS" /><category term="Journaling" /><summary type="html">Sometimes, we would like to prove if a specific file existed at sometime in filesystem, and then got deleted. That is, the received image doesn’t have the file we’re looking for.</summary></entry><entry><title type="html">Was a malicious application executed on system?</title><link href="http://localhost:4000/blog/IRC/application-execution-evidence-prefetch" rel="alternate" type="text/html" title="Was a malicious application executed on system?" /><published>2021-01-31T23:00:00+03:00</published><updated>2021-01-31T23:00:00+03:00</updated><id>http://localhost:4000/blog/IRC/application-execution-evidence-prefetch</id><content type="html" xml:base="http://localhost:4000/blog/IRC/application-execution-evidence-prefetch">&lt;p&gt;Sometimes, we would like to answer once a malicious application found on system, the following questions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Was it executed?&lt;/li&gt;
  &lt;li&gt;How many times it was executed?&lt;/li&gt;
  &lt;li&gt;What date/time the application was executed?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of several found artifacts on Windows system that provide evidence whether an application was executed or not is Prefetch.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-is-prefetch&quot;&gt;What is Prefetch?&lt;/h3&gt;
&lt;p&gt;Prefetch is a mean for the OS to speed up booting and application loading times. 
This artifact can help us in identifying if an application was executed, time of execution, and number of times it was executed.&lt;/p&gt;

&lt;p&gt;All of this depends if this feature is enabled on system or not. Due to the low number of times Windows server boot up in comparison to workstations, this feature is disabled by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prefetch Directory Location&lt;/strong&gt;
C:\Windows\Prefetch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prefetch Example&lt;/strong&gt;
CMD.EXE-12345678.pf&lt;/p&gt;

&lt;p&gt;Details&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application Name&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Dash -&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Path Hash (8 Characters)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;.pf&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
Let’s say you’ve found two entries relate to CMD, what does this mean?&lt;br /&gt;
This means that CMD.EXE is located in two different locations and both of CMD instances were run at least 1 time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note about Path Hash&lt;/strong&gt;
In case of the executed application is a hosting application such as rundll32.exe, svchost.exe, etc. the calculated hash isn’t generated from only the path hash, but also other factors contribute into this such as the used command line when running the application, in addition to the /Prefetch command line argument if it was used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Prefetch Parsing Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PECMD&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;WinPrefetchView&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;w10pf_parse&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;etc.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 5th easy challenge (B4 Catch) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tool here will be PECMD&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PECMD used command&lt;/strong&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PECmd.exe -f &quot;C:\Users\%username%\Downloads\Challenges\Easy - Prefetches - B4-Catch\Challenge\Prefetch\SCVHOST.EXE-E4213C89.pf&quot;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;4th-challenge&quot;&gt;4th Challenge&lt;/h3&gt;

&lt;p&gt;This challenges asks two questions with regards to found malicious application on system&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many times this application was executed?&lt;/li&gt;
  &lt;li&gt;Last execution time of the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210131-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the question is about only the malicious application “scvhost”, we’ll parse only its prefetch (pf) file.&lt;br /&gt;
The following screenshots shows the number of times it was executed, and the times of execution, in addition to the last run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210131-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;Number of execution: 4&lt;br /&gt;
Time Stamp: 07-02-2020 21:26&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.hexacorn.com/blog/2012/06/13/prefetch-hash-calculator-a-hash-lookup-table-xpvistaw7w2k3w2k8/&lt;/li&gt;
  &lt;li&gt;https://hiddenillusion.github.io/2016/05/10/go-prefetch-yourself/&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><summary type="html">Sometimes, we would like to answer once a malicious application found on system, the following questions</summary></entry><entry><title type="html">Was a specific file accessed by this user?</title><link href="http://localhost:4000/blog/IRC/file-access-evidence" rel="alternate" type="text/html" title="Was a specific file accessed by this user?" /><published>2021-01-28T21:00:00+03:00</published><updated>2021-01-28T21:00:00+03:00</updated><id>http://localhost:4000/blog/IRC/file-access-evidence</id><content type="html" xml:base="http://localhost:4000/blog/IRC/file-access-evidence">&lt;p&gt;Sometimes, we’re encountered with this question of whether for example a compromised account has accessed an important local/remote file.&lt;/p&gt;

&lt;p&gt;There are two important artifacts on Windows system that may reveal this information to us which are JumpLists and LNK files.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-are-jumplists&quot;&gt;What are JumpLists?&lt;/h3&gt;
&lt;p&gt;Jumplists are means to ease user’s access to the frequently/previously accessed items in system with regards to the installed application.&lt;/p&gt;

&lt;p&gt;This will provide us an opportunity to see if an an application file was opened under a user profile or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JumpLists Locations&lt;/strong&gt;
They are in each user’s pofile in these two directories&lt;br /&gt;
C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\Microsoft\Windows\Recent\AutomaticDestinations&lt;br /&gt;
C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\Microsoft\Windows\Recent\CustomDestinations&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JumpLists Parsing Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Jumplist Explorer (GUI based Jump List viewer)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;JLECmd (Jump List parser)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;etc.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 3rd easy challenge (Bling-Bling) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tool here will be Jumplist Explorer.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;2nd-challenge&quot;&gt;2nd Challenge&lt;/h3&gt;

&lt;p&gt;This challenge focuses on proving whether one of the suspected users has accessed an xlsx file and provides as an answer both their first name as well as the accessed file name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210128-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the question artifacts are only the Jumplist directories (AutomaticDestinations and CustomDestinations) for two users, we’ll import the content of these four directories into JumpList Explorer at once, and start navigating them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210128-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can observe the finance related file appears under JSnow profile JumpList&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;FileName: Finance-Summary.rar&lt;br /&gt;
First Name: John&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As mentioned above, the other important artifact to prove if a user has accessed/opened file is LNK files.&lt;/p&gt;

&lt;h3 id=&quot;what-are-lnk-files&quot;&gt;What are LNK files?&lt;/h3&gt;
&lt;p&gt;LNK files are Microsoft Windows Shortcut Files.
These LNK files usually get created once opening a local/remote file.&lt;/p&gt;

&lt;p&gt;This can also be helpful sometimes even if the original (target) file has been removed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LNK files Locations&lt;/strong&gt;
They can be anywhere in filesystem; however, the following two directories are interesting ones to parse when trying to seach for an evidence related to whether a file has been accessed/opened or not.&lt;/p&gt;

&lt;p&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\Microsoft\Windows\Recent&lt;br /&gt;
C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\Microsoft\Office\Recent&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LNK Files Parsing Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LECMD&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;exiftool&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 8th easy challenge (LNK Files) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tool here will be LECMD&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LECMD used command&lt;/strong&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LECmd.exe -d &quot;C:\Users\%username%\Downloads\Challenges\Easy - LNK - Rumors\Challenge\littlefinger\AppData\Roaming\Microsoft\Windows\Recent&quot; --csv . --csvf littlefingerLNK.csv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt; directs lecmd to parse recent folder of littlefinger user.&lt;br /&gt;
I’ve already downloaded the question evidence into my current Downloads folder.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--csv .&lt;/code&gt; means create csv file in the same current directory&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--csvf&lt;/code&gt; means name the outputted csv file this way&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;3rd-challenge&quot;&gt;3rd Challenge&lt;/h3&gt;

&lt;p&gt;This challenge focuses on proving whether a specific user (Littlefinger) has accessed the salaries file or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210128-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Provided evidence is the suspected user’s profile; therefore, we’ll check LNK files and parse them using LECMD.&lt;/p&gt;

&lt;p&gt;As we can see in the outputted CSV file after some filtration to only include files that have network directory since we’re only interested in network share access&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210128-4.png&quot; alt=&quot;fourth screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge-1&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;F1a9-AFNIEJFJSSE&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><summary type="html">Sometimes, we’re encountered with this question of whether for example a compromised account has accessed an important local/remote file.</summary></entry><entry><title type="html">Was there timestomping on the analyzed system?</title><link href="http://localhost:4000/blog/IRC/timestomping" rel="alternate" type="text/html" title="Was there timestomping on the analyzed system?" /><published>2021-01-25T23:50:00+03:00</published><updated>2021-01-25T23:50:00+03:00</updated><id>http://localhost:4000/blog/IRC/Timestomping</id><content type="html" xml:base="http://localhost:4000/blog/IRC/timestomping">&lt;h3 id=&quot;what-is-timestomping&quot;&gt;What is timestomping?&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;Timestomping is the ability from an attacker to modify original timestamps of folder/file in order to prevent the investigator from associating these timestamps with an attack period.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;master-file-table-mft&quot;&gt;Master File Table (MFT)&lt;/h3&gt;
&lt;p&gt;Filesystem usually has an index mechanism where you can see files/directories names in the system and their associated metadata. This includes timestamps.
In NTFS filesystem, each folder/file has one entry in MFT with two different timestamps called $STANDARD_INFORMATION and $FILE_NAME.&lt;/p&gt;

&lt;p&gt;Mainly, standard information attributes are modifiable by users, whereas file name attributes tend to be modified by OS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MFT Location&lt;/strong&gt;
Root directory of the drive for example C:\$MFT&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MFT Parsing Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MFTECMD&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;analyzeMFT.py&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Mft2Csv&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;MFTExplorer&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;etc.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 1st easy challenge (Time Machine) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Let’s use MFTECmd to parse $MFT file, and then view the results using Timeline Explorer&lt;/p&gt;

&lt;p&gt;Link to download these two tools: https://ericzimmerman.github.io/#!index.md&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MFTECmd used command&lt;/strong&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MFTECMD.exe -f &quot;$MFT&quot; --csv . --bn MFTOUTPUT.csv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;. means we would like to save the outputted CSV file to the same directory.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1st-challenge&quot;&gt;1st Challenge&lt;/h3&gt;

&lt;p&gt;The challenge focuses on changes on user’s desktop and the provided evidence is $MFT file; 
therefore, we have parsed the file using MFTECMD. Now, we’ll view the parsed MFT using Timeline Explorer&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210125-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Timeline explorer after opening parsed $MFT&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210125-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to have a better view, we’ll reset column widths (Tools &amp;gt; Rest Column Widths (Ctrl+R))
Now, we’ll filter to show only the user’s desktop folder as the parent path&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210125-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may notice I’ve brough the attention into mainly two columns which are Created0x10 and Created0x30&lt;/p&gt;

&lt;p&gt;Created0x10 is standard info creation time (easy be tampered with)&lt;br /&gt;
Created 0x30 is file name creation time (difficult to be tampered with).&lt;br /&gt;
If they differ, TIMESTOMPING might have happened.&lt;br /&gt;
Timeline Explorer doesn’t show timestamp in Created0x30 if it has the same date and time of Created0x10 to ease investigator work.&lt;/p&gt;

&lt;p&gt;We can clearly see that file name creation time (Createdx30) is in  the same timeframe other files in the same folder have been created.&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;FileName: Mod-File.txt&lt;br /&gt;
Time Stamp: 19-01-2020 11:51:19&lt;/p&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Timestomping" /><summary type="html">What is timestomping? Timestomping is the ability from an attacker to modify original timestamps of folder/file in order to prevent the investigator from associating these timestamps with an attack period.</summary></entry></feed>