<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2024-05-03T18:37:01+03:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Hejely Lab</title><subtitle>DFIR | Threat Hunting</subtitle><author><name>HejelyLab</name></author><entry><title type="html">Test New Page</title><link href="http://localhost:4000/blog/IRandTHSeries/Introduction" rel="alternate" type="text/html" title="Test New Page" /><published>2024-05-03T18:36:00+03:00</published><updated>2024-05-03T18:36:00+03:00</updated><id>http://localhost:4000/blog/IRandTHSeries/Test-NewPage</id><content type="html" xml:base="http://localhost:4000/blog/IRandTHSeries/Introduction">&lt;h3 id=&quot;test&quot;&gt;Test&lt;/h3&gt;</content><author><name>HejelyLab</name></author><category term="Incident Response" /><category term="Threat Hunting" /><summary type="html">Test</summary></entry><entry><title type="html">How to find out if there is persistence using WMI?</title><link href="http://localhost:4000/blog/IRC/Persistence-WMI" rel="alternate" type="text/html" title="How to find out if there is persistence using WMI?" /><published>2021-04-10T17:16:00+03:00</published><updated>2021-04-10T17:16:00+03:00</updated><id>http://localhost:4000/blog/IRC/Persistence-WMI</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Persistence-WMI">&lt;p&gt;If you would like to know about WMI, this post explains &lt;a href=&quot;https://hejelylab.github.io/blog/DigitalForensics/WMI&quot;&gt;WMI in Details&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s check 3rd medium challenge (WhoaMI) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;h3 id=&quot;14th-challenge&quot;&gt;14th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge states there is a persistence mechanism that’s related to powershell and CMD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll parse OBJECTS.DAT WMI repository file using PyWMIPersistenceFinder.py
You can find the tool here: &lt;a href=&quot;https://github.com/davidpany/WMI_Forensics&quot;&gt;PyWMIPersistenceFinder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;C:\temp\addadmin.ps1&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Persistence" /><summary type="html">If you would like to know about WMI, this post explains WMI in Details</summary></entry><entry><title type="html">Windows Management Instrumentation (WMI)</title><link href="http://localhost:4000/blog/DigitalForensics/WMI" rel="alternate" type="text/html" title="Windows Management Instrumentation (WMI)" /><published>2021-04-10T17:15:00+03:00</published><updated>2021-04-10T17:15:00+03:00</updated><id>http://localhost:4000/blog/DigitalForensics/WMI</id><content type="html" xml:base="http://localhost:4000/blog/DigitalForensics/WMI">&lt;h3 id=&quot;what-is-windows-management-instrumentation-wmi&quot;&gt;What is Windows Management Instrumentation (WMI)?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;WMI is a feature which allows querying, collecting, and managing Windows OS components eihter locally or remotely&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;A bit Longer Definition&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;WMI is a Microsoft implementation of Web-Based Enterprise Management (WBEM) in Windows OS&lt;br /&gt;&lt;br /&gt;
What is WBEM?&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;It is an open standard called the Web-Based Enterprise Management (WBEM) which aims to exchange Comon Information Model (CIM) data between systems&lt;br /&gt;&lt;br /&gt;
What is CIM?&lt;/li&gt;
    &lt;li&gt;It is a data model standard which allows hardware, Operating Systems or applications for example to define classes that represent the different components they have. An example would be a class that represents information about hardisk&lt;br /&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Example&lt;/strong&gt;
I would like to know the details about services on my system, and in specific DHCP service. I would write the following powershell command&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/CIMV2 -ClassName CIM_Service | Where-Object {$_.Name -eq &quot;dhcp&quot;}&lt;/code&gt;&lt;br /&gt;
With WMI, we are able to have powerful tasks gets accomplished such as creating processes remotely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is WMI organized?&lt;/strong&gt;
It is organized into Namespaces &amp;gt; Classes &amp;gt; Instances &lt;br /&gt;
Essentially, namespace may contain different classes, and classes can have one or more instances.
This is clear in the previous example, another example where there is one instance for this class&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/CIMV2 -ClassName Win32_OperatingSystem&lt;/code&gt;&lt;br /&gt;
output is the OS instance information&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does WMI provide us info about the operating system?&lt;/strong&gt;
This could be understood by looking at WMI architecture&lt;/p&gt;

&lt;h3 id=&quot;wmi-architecture&quot;&gt;WMI Architecture&lt;/h3&gt;
&lt;p&gt;WMI consists of 3 components:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;WMI Providers &amp;amp; Managed Objects&lt;br /&gt;
      So for any component to have its information available via WMI. It needs to have a provider which handles requests and queries about this object
    &lt;ul&gt;
      &lt;li&gt;Providers consist of two components which are&lt;br /&gt;
        &lt;ul&gt;
          &lt;li&gt;DLL File&lt;/li&gt;
          &lt;li&gt;Managed Object Format (MOF)
            &lt;ul&gt;
              &lt;li&gt;CIM scripts which describe classes that are available in WMI repository.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WMI Infrastructure&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;WMI core (WMI service) and WMI repository (C:\Windows\System32\wbem\repository)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WMI Consumers&lt;br /&gt;
  These are basically what can query WMI repository such as
    &lt;ul&gt;
      &lt;li&gt;Powershell&lt;/li&gt;
      &lt;li&gt;WMIC (WMI command-line utility)&lt;/li&gt;
      &lt;li&gt;Programming languages such as C#, C++, VB, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;how-to-access-wmi-repository&quot;&gt;How to access WMI repository?&lt;/h3&gt;
&lt;p&gt;Using one of two protocols which are&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Distributed Component Object Model (DCOM)
    &lt;ul&gt;
      &lt;li&gt;First, What is COM?
        &lt;blockquote&gt;
          &lt;p&gt;COM is a standard which specifies how objects or components can interact with other components whether they are in the same process or in different processes on the same computer&lt;br /&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;What is DCOM?
        &lt;blockquote&gt;
          &lt;p&gt;DCOM is the idea of having components or objects interact with other components even if they are in different systems&lt;br /&gt;
  For a component to request a service from another component in another system, this request can be forwarded to Remote Procedure Call (RPC) protocol which acts as the transmission protocol&lt;br /&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WinRM
    &lt;ul&gt;
      &lt;li&gt;WinRM is Microsoft implementation of protocol called WSMAN.
        &lt;ul&gt;
          &lt;li&gt;What is WSMAN?&lt;br /&gt;
            &lt;blockquote&gt;
              &lt;p&gt;It is a messaging protocol for exchanging information between a server and a client. It often relies on HTTP.&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wmi-attacks&quot;&gt;WMI Attacks&lt;/h3&gt;
&lt;p&gt;WMI can be leveraged by attackers in several post exploitation phases&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reconnaissance&lt;/li&gt;
  &lt;li&gt;Privilege Escalation&lt;/li&gt;
  &lt;li&gt;Lateral Movement&lt;/li&gt;
  &lt;li&gt;Persistence&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;I will explain with examples how WMI is used in only the latter two phases: Lateral movement &amp;amp; Persistence&lt;br /&gt;
In addition, I’ll explain approaches to detect them&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wmi-lateral-movement&quot;&gt;WMI Lateral Movement&lt;/h3&gt;
&lt;p&gt;Two examples to perform lateral movement using WMI are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;wmi process call create&lt;/li&gt;
  &lt;li&gt;wmiexec.py&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a fileless lateral movement, no need for the existence of any file on the target system, WMI will achieve the task&lt;br /&gt;
Communication will appear over port TCP 135 in the beginning, and then later a random port will be used after negotiation succeeds between the two systems&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;WMI Lateral Movement Detection Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Scenario&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In this example we will run “CMD /c ipconfig.exe” on remote system using WMIC command line utility, and confirm the observed events in both source and target systems.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Used WMIC command&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmic.exe /NODE:172.16.1.12 /USER:&quot;hejelylab\Administrator&quot; /PASSWORD:&quot;UserPassword&quot; process call create &quot;cmd.exe /c ipconfig.exe&quot;&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Eventlogs
    &lt;ul&gt;
      &lt;li&gt;Security Event logs&lt;br /&gt;
      You need to have Command Line Auditing Enabled.
      No logs appeared to me in this example if command line logging is not enabled and sysmon is not installed.
        &lt;ul&gt;
          &lt;li&gt;Source
            &lt;ul&gt;
              &lt;li&gt;Security logs, event ID: 4688
                &lt;ul&gt;
                  &lt;li&gt;Process name: WMIC.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: powershell.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Target
            &lt;ul&gt;
              &lt;li&gt;Security logs, event ID: 4688
                &lt;ul&gt;
                  &lt;li&gt;Process name: cmd.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: WmiPrvSE.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Security logs, event ID: 4688
                &lt;ul&gt;
                  &lt;li&gt;Process name: ipconfig.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: cmd.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Sysmon Event logs
        &lt;ul&gt;
          &lt;li&gt;Source
            &lt;ul&gt;
              &lt;li&gt;Sysmon logs, event ID: 1
                &lt;ul&gt;
                  &lt;li&gt;Process name: WMIC.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: powershell.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Target
            &lt;ul&gt;
              &lt;li&gt;Sysmon logs, event ID: 1
                &lt;ul&gt;
                  &lt;li&gt;Process name: cmd.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: WmiPrvSE.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Sysmon logs, event ID: 1
                &lt;ul&gt;
                  &lt;li&gt;Process name: ipconfig.exe&lt;/li&gt;
                  &lt;li&gt;Parent process name: cmd.exe&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-1_WMI.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wmi-persistence&quot;&gt;WMI Persistence&lt;/h3&gt;
&lt;p&gt;WMI persistence can be achieved via WMI event subscription for example&lt;br /&gt;
Steps: &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An MOF file gets created&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;MOF file contains the following:&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;Event Trigger (Class __EventFilter)
        &lt;ul&gt;
          &lt;li&gt;An example, event trigger is a specific date, an event that occurs on the system (notepad.exe starts)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event Consumer (Class __EventConsumer)
        &lt;ul&gt;
          &lt;li&gt;What will happen once the trigger occurs, for example, run a specific script command.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Binding (class __FilterToConsumerBinding)
        &lt;ul&gt;
          &lt;li&gt;This  what binds the consumer to the trigger.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Compile MOF file
    &lt;ul&gt;
      &lt;li&gt;Using mofcomp.exe&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Persistence is achieved!!!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;WMI Persistence Detection Examples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Example&lt;/strong&gt;
Scenario&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A MOF file is dropped to system&lt;/li&gt;
  &lt;li&gt;The MOF file gets compiled using mofcomp.exe (mofcomp is spawned by powershell) &lt;br /&gt;
WMI event consumer event is executed (The example here is to run BATCH script which will execute cmd)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detection&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sysmon
    &lt;ul&gt;
      &lt;li&gt;Event ID 1: powershell &amp;gt; mofcomp.exe .\a.mof&lt;/li&gt;
      &lt;li&gt;Event ID 20: WmiConsumerEvent&lt;/li&gt;
      &lt;li&gt;Event ID 21: WmiBindingEvent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WMI-Activity Operational Log
    &lt;ul&gt;
      &lt;li&gt;Event ID 5861: records permanent event consumer creation&lt;br /&gt;
&lt;img src=&quot;/blog/assets/images/210410-2_WMI.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Security
    &lt;ul&gt;
      &lt;li&gt;Event ID 4688: powershell &amp;gt; mofcomp.exe .\a.mof&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All events in one table
&lt;img src=&quot;/blog/assets/images/210410-3_WMI.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note (Different example): Sysmon also triggers for WMI event filter in Event ID: 19.
&lt;img src=&quot;/blog/assets/images/210410-4_WMI.png&quot; alt=&quot;fourth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Example,WMI detection using WMI&lt;/strong&gt;
I will compile the following MOF file in advance to view valid results of WMI detection using WMI&lt;br /&gt;
Executed command: mofcomp.exe .\LogonTime.mof&lt;br /&gt;
LogonTime.mof&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Purpose: After being compile, for any interactive logon “LogonType=2”, CMD will be run and echo date and time into “C:\Users\administrator\Downloads\LogonTime.txt”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LogonTime.mof Content&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;#pragma namespace (“\\.\root\subscription”)&lt;br /&gt;
instance of __EventFilter as $FILTER&lt;br /&gt;
{&lt;br /&gt;
    Name = “VBScript Filter”;&lt;br /&gt;
    EventNamespace = “root\cimv2”;&lt;br /&gt;
 Query = “SELECT * FROM __InstanceCreationEvent WITHIN 5 WHERE (TargetInstance ISA ‘Win32_LogonSession’ AND (TargetInstance.LogonType = 2))”;&lt;br /&gt;
    QueryLanguage = “WQL”;&lt;br /&gt;
};&lt;br /&gt;
instance of ActiveScriptEventConsumer as $CONSUMER&lt;br /&gt;
{&lt;br /&gt;
    Name = “VBScript CMD Consumer”;&lt;br /&gt;
    ScriptingEngine = “VBScript”;&lt;br /&gt;
    ScriptText =
      “Set objShell = CreateObject(&quot;WScript.Shell&quot;)\n”
   “objShell.Run &quot;C:\Windows\system32\cmd.exe /C echo %date%%time% &amp;gt; C:\Users\administrator\Downloads\LogonTime.txt&quot;\n”;&lt;br /&gt;
};&lt;br /&gt;
instance of __FilterToConsumerBinding&lt;br /&gt;
{&lt;br /&gt;
    Consumer = $CONSUMER ;&lt;br /&gt;
    Filter = $FILTER ;&lt;br /&gt;
};&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once logging out and logging again interactively, ipconfig will be executed.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Remember that MOF contains&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;trigger filter (__EventFilter),&lt;/li&gt;
    &lt;li&gt;consumer (__EventConsumer), and&lt;/li&gt;
    &lt;li&gt;Binding (__FilterToConsumerBinding)&lt;br /&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
We can fetch this infomation using the following powershell cmdlets&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/subscription -ClassName __EventFilter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-5_WMI.png&quot; alt=&quot;fifth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/subscription -ClassName __EventConsumer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-6_WMI.png&quot; alt=&quot;sixth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210410-7_WMI.png&quot; alt=&quot;seventh screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Example&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;WMI Repository file
    &lt;ul&gt;
      &lt;li&gt;File Name: OBJECTS.DAT&lt;/li&gt;
      &lt;li&gt;Location: C:\Windows\System32\wbem\Repository&lt;/li&gt;
      &lt;li&gt;Purpose: this file contains WMI executed commands on system. We can pull it andexamine it&lt;br /&gt;
  I wrote an example of how to do this in this post &lt;a href=&quot;https://hejelylab.github.io/blog/IRC/Persistence-WMI&quot;&gt;WMI Persistence Example&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.varonis.com/blog/wmi-windows-management-instrumentation/&lt;/li&gt;
  &lt;li&gt;https://www.fireeye.de/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=aBQ1vEjK6v4&lt;/li&gt;
  &lt;li&gt;https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/&lt;/li&gt;
  &lt;li&gt;https://www.hackingarticles.in/lateral-movement-wmi/&lt;/li&gt;
  &lt;li&gt;https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="Digital Forensics" /><category term="Lateral Movement" /><category term="Persistence" /><summary type="html">What is Windows Management Instrumentation (WMI)?</summary></entry><entry><title type="html">How to identify malicious processes by comparing an infected memory image with a clean baseline one?</title><link href="http://localhost:4000/blog/IRC/Memory-CompareImages" rel="alternate" type="text/html" title="How to identify malicious processes by comparing an infected memory image with a clean baseline one?" /><published>2021-03-28T00:00:00+03:00</published><updated>2021-03-28T00:00:00+03:00</updated><id>http://localhost:4000/blog/IRC/Memory-CompareImages</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Memory-CompareImages">&lt;p&gt;Let’s check 1st advanced challenge (2nd Base) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;h3 id=&quot;13th-challenge&quot;&gt;13th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge tells there is a malicious process in a memory image and asked if we can identify this by comparing the memory image against another clean memory image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210328-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First thing we will do is confirming the memory image profile using imageinfo against one of the two images&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vol.py -f DESKTOP-HUB666E-20191101-155228.dmp imageinfo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210328-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now, since the challenge asks about suspicious process, we’ll use processbl plugin which compares the processes of an images to processes of a baseline image&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Two options to be used in comparison, display&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Ony unknown by using -U option&lt;/li&gt;
      &lt;li&gt;Only known by using -K option&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DESKTOP-HUB666E-20200209-162404.dmp --profile=Win10x64_15063 processbl -B ../BaseLine/DESKTOP-HUB666E-20191101-155228.dmp -U 2&amp;gt;/dev/null&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210328-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The suspicious process appears to be whatsapp with PID:5392, this is due to spwaning CMD process (3352)&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the Challenge:&lt;/h3&gt;
&lt;p&gt;whatsapp.exe&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;side-note&quot;&gt;Side note&lt;/h3&gt;
&lt;p&gt;With same approach with comparing processes between images, we can compare drivers and services using plugins&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;servicebl&lt;/li&gt;
  &lt;li&gt;driverbl&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Memory Investigation" /><summary type="html">Let’s check 1st advanced challenge (2nd Base) in (incident-response-challenge.com) website and try to solve it.</summary></entry><entry><title type="html">How to identify process hollowing in a memory image?</title><link href="http://localhost:4000/blog/IRC/Memory-ProcessHollowing" rel="alternate" type="text/html" title="How to identify process hollowing in a memory image?" /><published>2021-03-20T00:00:00+03:00</published><updated>2021-03-20T00:00:00+03:00</updated><id>http://localhost:4000/blog/IRC/Memory-ProcessHollowing</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Memory-ProcessHollowing">&lt;h3 id=&quot;what-is-process-hollowing&quot;&gt;What is Process Hollowing?&lt;/h3&gt;
&lt;p&gt;Process hollowing occurs when a malware launches a process in a suspended state and then deallocates the process memory which contains the original program’s code (Hollow process memory out), and replaces it with the malicious content/code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does Process Hollowing process gets accomplished?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Malicious process creates a legitimate process in a suspended state using CreateProcess() function.&lt;/li&gt;
  &lt;li&gt;The legitimate process memory gets hollowed out to have the malicious code replaces the original code. This is performed by calling NtUnmapViewOfSection or ZwUnmapViewofSection functions.&lt;/li&gt;
  &lt;li&gt;Allocated a new memory in the original process using VirtualAllocEx()&lt;/li&gt;
  &lt;li&gt;The allocated memory gets written into with the malicious code using WriteProcessMemory()&lt;/li&gt;
  &lt;li&gt;Process ends the suspended state by invoking ResumeThread()&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;12th-challenge&quot;&gt;12th Challenge&lt;/h3&gt;

&lt;p&gt;Let’s check 6th advanced challenge (Frog Find) in (incident-response-challenge.com) website and try to solve it.
&lt;img src=&quot;/blog/assets/images/210320-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The challenge stresses that there is “frog” hidden in a process.&lt;/p&gt;

&lt;p&gt;First thing we will do is to find memory image profile using volatility imageinfo plugin.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vol.py -f THEEYRIE.dmp imageinfo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210320-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to identify process hollowing from a memory image?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When an application gets executed, memory regions/pages are assigned to this executable in memory so process content has defined regions in the memory to get executed.&lt;/li&gt;
  &lt;li&gt;Every process has what is called Executive Process Structure (_EPROCESS). This EPROCESS contains fields which provide information about the process and points to other structures such as Virtual Address Descriptor (VAD).&lt;/li&gt;
  &lt;li&gt;One of the EPROCESS fields is something called ActiveProcessLinks which is part of a complete doubly linked list structures that circulates all the existing processes in memory.&lt;/li&gt;
  &lt;li&gt;When we run imageinfo or kdbgscan plugins, we identify what’s called PsActiveProcessHead.&lt;/li&gt;
  &lt;li&gt;PsActiveProcessHead points to the doubly linked list ActiveProcessLink of the process “System”. Now, traversing other processes is achievable as this is doubly linked list (In doubly linked list there are two links to the next and to the previous nodes in every node)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210320-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remember, VAD structure is one of the structures that EPROCESS points to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is VAD?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;VAD trackes the memory pages that are allocated to a process.&lt;/li&gt;
  &lt;li&gt;Volatility malfind plugin searches for VAD entries that represent memory pages which are dynamically allocated during runtime using API calls such as VirtualAllocEx as what occurs in process hollowing.&lt;/li&gt;
  &lt;li&gt;Not only that, it looks if these memory pages contain PAGE_EXECUTE_READWRITE permission and looks if instructions inside it represent PE header (Windows executable header)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execute malfind against the memory using one of the suggested profiles from imageinfo
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vol.py -f THEEYRIE.dmp --profile=Win10x64_17134 malfind&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210320-4.png&quot; alt=&quot;fourth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The only candidate which contains an executable (MZ header) is this process chrome.exe with process ID 1996&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210320-5.png&quot; alt=&quot;fifth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dump chrome.exe process memory (memdump)&lt;/strong&gt;
We can identify if there is malicious content by dumping the whole process memory pages that are assigned to this suspicious process using memdump plugin&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vol.py -f THEEYRIE.dmp --profile=Win10x64_17134 memdump -p1996 -D chromeDump/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210320-6.png&quot; alt=&quot;sixth screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;Frog-FWGA142FS&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;alternative-approach&quot;&gt;Alternative Approach&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dump chrome.exe process executable (procdump)&lt;/strong&gt;
Alternative option is to dump the malicious process executable image as well and perform the same check&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vol.py -f THEEYRIE.dmp --profile=Win10x64_17134 procdump -p 1996 --dump-dir 1996PID_Executable/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210320-7.png&quot; alt=&quot;seventh screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://imphash.medium.com/windows-process-internals-a-few-concepts-to-know-before-jumping-on-memory-forensics-823d72d4d7b8&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Memory Investigation" /><summary type="html">What is Process Hollowing? Process hollowing occurs when a malware launches a process in a suspended state and then deallocates the process memory which contains the original program’s code (Hollow process memory out), and replaces it with the malicious content/code.</summary></entry><entry><title type="html">How to find out if there is persistence using Image File Execution Options (IFEO)?</title><link href="http://localhost:4000/blog/IRC/Persistence-IFEO" rel="alternate" type="text/html" title="How to find out if there is persistence using Image File Execution Options (IFEO)?" /><published>2021-03-12T00:00:00+03:00</published><updated>2021-03-12T00:00:00+03:00</updated><id>http://localhost:4000/blog/IRC/Persistence-IFEO</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Persistence-IFEO">&lt;h3 id=&quot;what-is-image-file-execution-options-ifeo&quot;&gt;What is Image File Execution Options (IFEO)?&lt;/h3&gt;
&lt;p&gt;IFEO is a feature which lets developers attach a debugger to an application/process. This allows to run the debugger/application at the time of running the application we wish to debug.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to set IFEO?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using the registry&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Using GFlags tool&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ifeo-types-with-implementation&quot;&gt;IFEO Types with implementation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;First Implementation&lt;/strong&gt;
 Create a debugger to a process in this registry key&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\&amp;lt;ProcessName&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ProcessName is a registry key that has the name of the process we would like to attach a debugger to it.
The following example tells the debugger for notepad.exe will be calc.exe&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Initially, IFEO Key looks like this
Now, we’ll add a key named notepad.exe
&lt;img src=&quot;/blog/assets/images/210312-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As below, Debugger is now calc.exe, whenever notepad.exe is set to be executed, the debugger “calc” will be run
&lt;img src=&quot;/blog/assets/images/210312-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Implementation&lt;/strong&gt;
Launch a process/program when another application silently exits&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;Silent exit for an application means the application has been terminated in one of two ways&lt;/dt&gt;
    &lt;dd&gt;Self termination by calling ExitProcess&lt;/dd&gt;
    &lt;dd&gt;Another process terminates the monitored process by calling TerminateProcess&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can be set in the following registry key&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;HKLM\Software\Microsoft\Windows NT\CurrentVersion\SilentProcessExit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
We’ll run calc.exe once notepad.exe is silently exiting.&lt;br /&gt;
First, we’ll enable silent process exit monitoring by adding GlobalFlag name with hexadecimal value of 200 in notepad.exe key under IFEO key&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210312-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll create SilentProcessExit key under CurrentVersion, and under this key we’ll add subkey named notepad.exe&lt;/p&gt;

&lt;p&gt;By adding both 
MonitorProcess value to be calc.exe, and ReportingMode to 1,
now every silent exit of notepad.exe will trigger calc.exe to be run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210312-4.png&quot; alt=&quot;fourth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An example of how this appears&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210312-5.gif&quot; alt=&quot;fifth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Example
Let’s check 7th medium challenge (Universal) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tools here will be Registry Explorer to navigate through the registry keys&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;11th-challenge&quot;&gt;11th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge tells an occasional popup for CMD happens which seems to be a persistence pattern.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210312-6.png&quot; alt=&quot;sixth screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll check both registry keys that we have mentioned using Registry Explorer as the evidence mentions Global Flags in the provided evidence&lt;/p&gt;

&lt;p&gt;System Regsitry hives are in C:\Windows\System32\config, we’ll only parse Software registry hive&lt;/p&gt;

&lt;p&gt;In Image File Execution Options, we notice the value name GloabalFlag exists&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210312-7.png&quot; alt=&quot;seventh screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And under SilentProcessExit key, and notepad.exe subkey, we notice the monitoring process is an executable under temp directory which will run whenever a silent exit occurs for notepad.exe&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210312-8.png&quot; alt=&quot;eighth screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;ZmxhZy17Rm91bmRJdH0.exe&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/gflags&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/registry-entries-for-silent-process-exit&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-silent-process-exit-monitoring&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/registry-entries-for-silent-process-exit&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Persistence" /><summary type="html">What is Image File Execution Options (IFEO)? IFEO is a feature which lets developers attach a debugger to an application/process. This allows to run the debugger/application at the time of running the application we wish to debug.</summary></entry><entry><title type="html">How to find out if there is persistence using Registry run keys or Startup Folders?</title><link href="http://localhost:4000/blog/IRC/Persistence-Registry-Run-Keys" rel="alternate" type="text/html" title="How to find out if there is persistence using Registry run keys or Startup Folders?" /><published>2021-03-02T18:15:00+03:00</published><updated>2021-03-02T18:15:00+03:00</updated><id>http://localhost:4000/blog/IRC/Persistence-Registry-Run-Keys</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Persistence-Registry-Run-Keys">&lt;p&gt;Out of many persistence techniques, one of the most common ones is the usage of Registry run Keys or Startup Folders. This will cause an added application to be executed whenever a user logs in.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-are-the-startup-folders&quot;&gt;What are the startup folders?&lt;/h3&gt;
&lt;p&gt;They are folders that are checked whenever each user logs in&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;First path is under each user’s profile&lt;br /&gt;
C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Second path is system wide path for all users&lt;br /&gt;
C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;registry-run-keys&quot;&gt;Registry-Run-Keys&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Most used run keys for persistence are &lt;br /&gt;
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;Registry Parsing Tools&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;Registry explorer (SYSTEM Hive)&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;RECmd&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;RegRipper&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;etc.&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 7th easy challenge (Sports) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tools here will be Registry Explorer to navigate through the registry keys&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;10th-challenge&quot;&gt;10th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge asks to look at the user’s profile “Sansa”, as there might be something when waking up!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210302-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll parse NTUSER.DAT of the mentioned user, and navigate to Run (User run key) using the existing bookmarked keys.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210302-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see an executable runs everytime this user logs in, which is under public user profile&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210302-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;Frag-AGREWEHDFG.exe&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://attack.mitre.org/techniques/T1547/001/&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Persistence" /><summary type="html">Out of many persistence techniques, one of the most common ones is the usage of Registry run Keys or Startup Folders. This will cause an added application to be executed whenever a user logs in.</summary></entry><entry><title type="html">How to prove there was a lateral movement using PsExec via EventLogs?</title><link href="http://localhost:4000/blog/IRC/Lateral-Movement-PsExec" rel="alternate" type="text/html" title="How to prove there was a lateral movement using PsExec via EventLogs?" /><published>2021-02-21T19:45:00+03:00</published><updated>2021-02-21T19:45:00+03:00</updated><id>http://localhost:4000/blog/IRC/Lateral-Movement-PsExec</id><content type="html" xml:base="http://localhost:4000/blog/IRC/Lateral-Movement-PsExec">&lt;p&gt;In a digital forensics investigation, one of the important points to look for is lateral movement between systems in the environment. This post shows how to prove if there was lateral movement through Sysinternal PsExec tool using only Windows EventLogs as an evidence artifacts.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-is-psexec&quot;&gt;What is PsExec?&lt;/h3&gt;
&lt;p&gt;It’s a tool that lets you execute processes on other systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An example of PsExec executing commands remotely&lt;/strong&gt;
Let’s say we want to open a CMD window on a remote system&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psexec \\RemoteIP -u DomainName\UserName -p UserPassword cmd&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Break it down&lt;br /&gt;
we have psexec already installed on our system, and we run it from CMD connecting to a RemoteIP system with a valid username/password there, and eventually start a CMD instance on the other system&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does PsExec execute commands remotely?&lt;/strong&gt;
Through interacting with Service Control Manager (SCM) via the network either through&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remote Procedure Call (RPC) or&lt;/li&gt;
  &lt;li&gt;Server Message Block (SMB).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PsExec Execution Steps (Example)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Authentication completed on the target system&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;An Administrative share is mapped&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;PsExec service binary (PSEXESVC) is copied to the mapped share&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;PsExec communicates with SCM via the network to start the service binary (PSEXESVC)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Starts the intended process/application on the target system&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;psexec-detection-via-eventlogs&quot;&gt;PsExec Detection via EventLogs&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Source System&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Security logs&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;Event ID: 4688 (PsExec Process Creation)&lt;/li&gt;
      &lt;li&gt;Event ID: 4689 (PsExec Process has been exited)&lt;/li&gt;
      &lt;li&gt;Event ID: 4648
        &lt;ul&gt;
          &lt;li&gt;Account Name(Under Subject section): the already logged on user on the source system&lt;/li&gt;
          &lt;li&gt;Account Name (Under Account whose credentials were used section): the used account on the target system&lt;/li&gt;
          &lt;li&gt;Target Server Name: target system&lt;/li&gt;
          &lt;li&gt;Process Name: Used process (if no change to PsExec name, the executable info will have PsExec)&lt;/li&gt;
          &lt;li&gt;Network Address: target IP&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Target System&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;System logs
    &lt;ul&gt;
      &lt;li&gt;Event ID: 7045 (PSEXESVC was installed)&lt;/li&gt;
      &lt;li&gt;Event ID: 7036 (PSEXESVC service state has changed)
        &lt;ul&gt;
          &lt;li&gt;This event should appear twice once service has started (Executing state), and the second time when the service gets stopped (Stopped state)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Security logs
    &lt;ul&gt;
      &lt;li&gt;Event ID: 4624
        &lt;ul&gt;
          &lt;li&gt;Successful logon&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 4672
        &lt;ul&gt;
          &lt;li&gt;Special privileges assigned to new logon&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 5140
        &lt;ul&gt;
          &lt;li&gt;A network share object was accessed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 5145
        &lt;ul&gt;
          &lt;li&gt;A network share object was checked to see whether client can be granted desired access&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 4656
        &lt;ul&gt;
          &lt;li&gt;A handle to an object was requested&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Event ID: 4663
        &lt;ul&gt;
          &lt;li&gt;An attempt was made to access an object&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;Eventlogs Parsing/Viewing Tools&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;EvtxEcmd&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;Event Log Explorer&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;Timeline Explorer&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;etc.&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 4th medium challenge (Kiwi) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tools here will be EvtxEcmd to parse eventlogs, and Timeline Explorer to view and filter eventlogs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;9th-challenge&quot;&gt;9th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge tells an appearance of kiwi logo (Mimikatz) appeared on DESKTOP-HUB666E (172.16.44.135), this is probably due to lateral movement from other systems.&lt;/p&gt;

&lt;p&gt;Provided evidence
	- DESKTOP-HUB666E eventlogs
	- WIN-IL7M7CC6UVU (DC) eventlogs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge Questions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provide another domain user account used by attacker aside from King-Slayer&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Provide target system IP when this user was used&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210221-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To solve this challenge, we’ll parse only Security and System eventlogs from the two systems provided eventlogs to detect if there is lateral movement occurred between them using PsExec&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Parsing Steps for each machine&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Copy only Security and System eventlogs into a directory named Logs2, for example.&lt;/li&gt;
  &lt;li&gt;Run EvtxECmd on each directory as mentioned below&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;EvtxEcmd used command&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DESKTOP-HUB666E (172.16.44.135)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EvtxECmd.exe -d &quot;C:\Users\%username%\Downloads\Challenges\Medium - PassTheHash - Event Logs - Kiwi\Challenge\KingSlayerHost- EventLogs\Logs2&quot; --csv . --csvf KingSlayerHost.csv&lt;/code&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;DC (WIN-IL7M7CC6UVU) (172.16.44.132)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EvtxECmd.exe -d &quot;C:\Users\%username%\Downloads\Challenges\Medium - PassTheHash - Event Logs - Kiwi\Challenge\DC-EventLogs\Logs2&quot; --csv . --csvf DC.csv&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s view the two file logs using Timeline Explorer&lt;/p&gt;

&lt;p&gt;To determine source of lateral movement we will use the mentioned event IDs 4688,4689, and 4648 looking for PsExec in them&lt;/p&gt;

&lt;p&gt;This event “4648” shows the execution of PsExec on Feb 9&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210221-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Event time: 2020-02-09 13:59:13&lt;br /&gt;
To break the event into what we know&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Subject Account Name: KingSlayer (Already logged on user)&lt;br /&gt;
Target User name: Daenerys (User account which will be used on the target system)&lt;br /&gt;
Target Server Name: WIN-IL7M7CC6UVU&lt;br /&gt;
Process Name: C:\temp\Niceone\PSTools\PsExec.exe&lt;br /&gt;
Target IP Address: 172.16.44.132&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;IP address of target machine: 172.16.44.132&lt;br /&gt;
Username: Daenerys&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;evidence-from-destination-system&quot;&gt;Evidence from destination system&lt;/h3&gt;

&lt;p&gt;Security logs, Event IDs: 4624 &amp;amp; 4672&lt;br /&gt;
Used pivot point: Daenerys&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210221-3.png&quot; alt=&quot;third screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;System logs, Event IDs: 7045 &amp;amp; 7036&lt;br /&gt;
Used pivot point: PSEXESVC&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210221-4.png&quot; alt=&quot;fourth screenshot&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;br /&gt;
In this example PSEXESVC service name wasn’t changed from default.
This can be changed; however, using -r option once executing PsExec in the source system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://www.jpcert.or.jp/english/pub/sr/20170612ac-ir_research_en.pdf&lt;/li&gt;
  &lt;li&gt;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4648&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/sysinternals/downloads/psexec&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Lateral Movement" /><summary type="html">In a digital forensics investigation, one of the important points to look for is lateral movement between systems in the environment. This post shows how to prove if there was lateral movement through Sysinternal PsExec tool using only Windows EventLogs as an evidence artifacts.</summary></entry><entry><title type="html">What information can you retrieve from lateral movement performed via RDP?</title><link href="http://localhost:4000/blog/IRC/RDP-Bitmap-Cache" rel="alternate" type="text/html" title="What information can you retrieve from lateral movement performed via RDP?" /><published>2021-02-16T01:20:00+03:00</published><updated>2021-02-16T01:20:00+03:00</updated><id>http://localhost:4000/blog/IRC/RDP-Bitmap-Cache</id><content type="html" xml:base="http://localhost:4000/blog/IRC/RDP-Bitmap-Cache">&lt;p&gt;In case of an investigation which consists of lateral movement using RDP, one of the most important evidence we would like to investigate is RDP bitmap Cache files.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-is-rdp-bitmap-cache&quot;&gt;What is RDP bitmap cache?&lt;/h3&gt;
&lt;p&gt;When a user connects to another system using RDP, small size (bitmap) images are stored in their RDP profile files, so that once the same image is to be used in the session it can be fetched/pulled quicker. And the overall RDP session experience is enhanced in case of a slow connection. This artifact can help us sometimes in identifying what was the user seeing in their RDP sessions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RDP Bitmap Cache Location (Every user profile)&lt;/strong&gt;
C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Microsoft\Terminal Server Client\Cache&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;RDP Bitmap Cache Parsing Tools&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;bmc-tools.py&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;This is the only tool I have used so far and it does the job perfectly&lt;br /&gt;
Tool Link: &lt;a href=&quot;https://github.com/ANSSI-FR/bmc-tools&quot;&gt;bmc-tools&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 8th medium challenge (Notes) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bmc-tools used command&lt;/strong&gt;
Note: Python needs to be installed beforehand&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir RDPBitMapOutput&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python bmc-tools.py -s &quot;C:\Users\%username%\Downloads\Challenges\Medium - BMCache - Notes\Challenge\littlefinger\AppData\Local\Microsoft\Terminal Server Client\Cache&quot; -d RDPBitMapOutput -b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;mkdir to create a folder that contains the output of bmc-tools script&lt;br /&gt;
-s to point to RDP bitmap cache folder&lt;br /&gt;
-b will provide one bitmap image which aggregates all bitmap images.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;8th-challenge&quot;&gt;8th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge tells that an access to Littlefinger’s session has been gained. 
Later, the attacker connected to DC using vary-adm’s account.
The provided evidence is the user’s profile as well as eventlogs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210216-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the first things to have in mind is what the attacker was seeing when they gained an access to Littlefinger’s sesion; Therefore, we’ll parse the RDP Bitmap Cache folder to know this using the aforementioned commmand.&lt;/p&gt;

&lt;p&gt;By looking at the aggregated bitmap image (it contains the word &lt;em&gt;collage&lt;/em&gt; in the name of the file), we notice a note that contains the mentioned user vary-adm account and his password&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210216-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;Uncutedition1@#&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><summary type="html">In case of an investigation which consists of lateral movement using RDP, one of the most important evidence we would like to investigate is RDP bitmap Cache files.</summary></entry><entry><title type="html">What folders were accessed by a specific user?</title><link href="http://localhost:4000/blog/IRC/folder-access" rel="alternate" type="text/html" title="What folders were accessed by a specific user?" /><published>2021-02-13T16:55:00+03:00</published><updated>2021-02-13T16:55:00+03:00</updated><id>http://localhost:4000/blog/IRC/folder-access</id><content type="html" xml:base="http://localhost:4000/blog/IRC/folder-access">&lt;p&gt;Sometimes we would like to know when investigating a user profile, if that user has accessed important folders, for example.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-are-shellbags&quot;&gt;What are Shellbags?&lt;/h3&gt;
&lt;p&gt;Shellbags are user’s registry keys which help in storing user’s view preferences of folders in Windows OS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
You visit a specific folder, modify the way items are presented in that folder. Once visiting the same folder again, the previous view preference is rendered from Shellbag registry keys.
Therefore, Shellbags may provide us an evidence of user’s access to folders.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Shellbags keys are in the following DAT files in each user’s profile (these two DAT files are considered user’s registry files/hives)&lt;br /&gt;&lt;/dt&gt;
  &lt;dd&gt;NTUSER.DAT&lt;/dd&gt;
  &lt;dd&gt;UsrClass.dat&lt;br /&gt;&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;NTUSER.DAT and UsrClass.dat Locations in each user’s profile&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;NTUSER.DAT&lt;br /&gt;&lt;/dt&gt;
    &lt;dd&gt;C:\Users\&amp;lt;username&amp;gt;\NTUSER.DAT&lt;br /&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;UsrClass.dat&lt;br /&gt;&lt;/dt&gt;
    &lt;dd&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Microsoft\Windows\UsrClass.dat&lt;br /&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;Once parsing the mentioned two DAT files, Shellbag keys are in the following locations&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;NTUSER.DAT\Software\Microsoft\Windows\Shell\BagMRU&lt;/dd&gt;
  &lt;dd&gt;NTUSER.DAT\Software\Microsoft\Windows\Shell\Bags&lt;/dd&gt;
  &lt;dd&gt;UsrClass.dat\Local Settings\Software\Microsoft\Windows\Shell\BagMRU&lt;/dd&gt;
  &lt;dd&gt;UsrClass.dat\Local Settings\Software\Microsoft\Windows\Shell\Bags&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Shellbag keys description&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;BagMRU&lt;br /&gt;&lt;/dt&gt;
    &lt;dd&gt;Stores actual directory structures of accessed folders&lt;br /&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;Bags&lt;br /&gt;&lt;/dt&gt;
    &lt;dd&gt;Stores actual folder customization data (window size, layout type, etc.)&lt;br /&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;Shellbags Parsing Tools&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;Windows ShellBag Parser&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;Shellbags.py&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;ShellBags Explorer (View both NTUSER.DAT and UsrClass.dat)&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;SBECmd&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;Registry Explorer&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;RECmd&lt;br /&gt;&lt;/dd&gt;
  &lt;dd&gt;etc.&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
Let’s check 1st medium challenge (Can’t touch this) in (incident-response-challenge.com) website and try to solve it.&lt;/p&gt;

&lt;p&gt;Used tool here will be ShellBags Explorer&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;7th-challenge&quot;&gt;7th Challenge&lt;/h3&gt;

&lt;p&gt;This challenge asks if “Projects” folder was accessed in a specific time frame, and if so, confirm the folder recreation timestamp.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210213-1.png&quot; alt=&quot;first screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the provided evidence contains user’s profile files, we’ll view both registry files NTUSER.DAT and UsrClass.dat using ShellBags Explorer searching for “Projects” folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/210213-2.png&quot; alt=&quot;second screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;answer-to-the-challenge&quot;&gt;Answer to the challenge&lt;/h3&gt;
&lt;p&gt;12:41:26&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The challenge used in this post belongs to &lt;a href=&quot;https://incident-response-challenge.com/&quot;&gt;incident-response-challenge.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HejelyLab</name></author><category term="IRC" /><category term="Digital Forensics" /><category term="Shellbags" /><summary type="html">Sometimes we would like to know when investigating a user profile, if that user has accessed important folders, for example.</summary></entry></feed>